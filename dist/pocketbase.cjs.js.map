{"version":3,"file":"pocketbase.cjs.js","sources":["../src/ClientResponseError.ts","../src/tools/cookie.ts","../src/tools/jwt.ts","../src/stores/BaseAuthStore.ts","../src/stores/LocalAuthStore.ts","../src/services/BaseService.ts","../src/services/SettingsService.ts","../src/tools/options.ts","../src/services/RealtimeService.ts","../src/services/CrudService.ts","../src/tools/legacy.ts","../src/tools/refresh.ts","../src/services/RecordService.ts","../src/services/CollectionService.ts","../src/services/LogService.ts","../src/services/HealthService.ts","../src/services/FileService.ts","../src/services/BackupService.ts","../src/tools/formdata.ts","../src/services/BatchService.ts","../src/Client.ts"],"sourcesContent":["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport class ClientResponseError extends Error {\n    url: string = \"\";\n    status: number = 0;\n    response: { [key: string]: any } = {};\n    isAbort: boolean = false;\n    originalError: any = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (errData !== null && typeof errData === \"object\") {\n            this.url = typeof errData.url === \"string\" ? errData.url : \"\";\n            this.status = typeof errData.status === \"number\" ? errData.status : 0;\n            this.isAbort = !!errData.isAbort;\n            this.originalError = errData.originalError;\n\n            if (errData.response !== null && typeof errData.response === \"object\") {\n                this.response = errData.response;\n            } else if (errData.data !== null && typeof errData.data === \"object\") {\n                this.response = errData.data;\n            } else {\n                this.response = {};\n            }\n        }\n\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (typeof DOMException !== \"undefined\" && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.response?.message;\n        if (!this.message) {\n            if (this.isAbort) {\n                this.message =\n                    \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\";\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\n                this.message =\n                    \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\";\n            } else {\n                this.message = \"Something went wrong while processing your request.\";\n            }\n        }\n    }\n\n    /**\n     * Alias for `this.response` for backward compatibility.\n     */\n    get data() {\n        return this.response;\n    }\n\n    /**\n     * Make a POJO's copy of the current error class instance.\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\n     */\n    toJSON() {\n        return { ...this };\n    }\n}\n","/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions {\n    decode?: (val: string) => string;\n}\n\n/**\n * Parses the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any } {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== \"string\") {\n        return result;\n    }\n\n    const opt = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf(\"=\", index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(\";\", index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n}\n\nexport interface SerializeOptions {\n    encode?: (val: string | number | boolean) => string;\n    maxAge?: number;\n    domain?: string;\n    path?: string;\n    expires?: Date;\n    httpOnly?: boolean;\n    secure?: boolean;\n    priority?: string;\n    sameSite?: boolean | string;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(\n    name: string,\n    val: string,\n    options?: SerializeOptions,\n): string {\n    const opt = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError(\"argument name is invalid\");\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError(\"argument val is invalid\");\n    }\n\n    let result = name + \"=\" + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError(\"option maxAge is invalid\");\n        }\n\n        result += \"; Max-Age=\" + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError(\"option domain is invalid\");\n        }\n\n        result += \"; Domain=\" + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError(\"option path is invalid\");\n        }\n\n        result += \"; Path=\" + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError(\"option expires is invalid\");\n        }\n\n        result += \"; Expires=\" + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += \"; HttpOnly\";\n    }\n\n    if (opt.secure) {\n        result += \"; Secure\";\n    }\n\n    if (opt.priority) {\n        const priority =\n            typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case \"low\":\n                result += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                result += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                result += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(\"option priority is invalid\");\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite =\n            typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                result += \"; SameSite=Lax\";\n                break;\n            case \"strict\":\n                result += \"; SameSite=Strict\";\n                break;\n            case \"none\":\n                result += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(\"option sameSite is invalid\");\n        }\n    }\n\n    return result;\n}\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return Object.prototype.toString.call(val) === \"[object Date]\" || val instanceof Date;\n}\n","// @todo remove after https://github.com/reactwg/react-native-releases/issues/287\nconst isReactNative =\n    (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\n    (typeof global !== \"undefined\" && (global as any).HermesInternal);\n\nlet atobPolyfill: Function;\nif (typeof atob === \"function\" && !isReactNative) {\n    atobPolyfill = atob;\n} else {\n    /**\n     * The code was extracted from:\n     * https://github.com/davidchambers/Base64.js\n     */\n    atobPolyfill = (input: any) => {\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n        let str = String(input).replace(/=+$/, \"\");\n        if (str.length % 4 == 1) {\n            throw new Error(\n                \"'atob' failed: The string to be decoded is not correctly encoded.\",\n            );\n        }\n\n        for (\n            // initialize result and counters\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\n            // get next character\n            (buffer = str.charAt(idx++));\n            // character found in table? initialize bit storage and add its ascii value;\n            ~buffer &&\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4)\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n                : 0\n        ) {\n            // try to find character in table (0-63, not found => -1)\n            buffer = chars.indexOf(buffer);\n        }\n\n        return output;\n    };\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n            const encodedPayload = decodeURIComponent(\n                atobPolyfill(token.split(\".\")[1])\n                    .split(\"\")\n                    .map(function (c: string) {\n                        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n                    })\n                    .join(\"\"),\n            );\n\n            return JSON.parse(encodedPayload) || {};\n        } catch (e) {}\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || payload.exp - expirationThreshold > Date.now() / 1000)\n    ) {\n        return false;\n    }\n\n    return true;\n}\n","import { cookieParse, cookieSerialize, SerializeOptions } from \"@/tools/cookie\";\nimport { isTokenExpired, getTokenPayload } from \"@/tools/jwt\";\nimport { RecordModel } from \"@/tools/dtos\";\n\nexport type AuthRecord = RecordModel | null;\n\nexport type AuthModel = AuthRecord; // for backward compatibility\n\nexport type OnStoreChangeFunc = (token: string, record: AuthRecord) => void;\n\nconst defaultCookieKey = \"pb_auth\";\n\n/**\n * Base AuthStore class that stores the auth state in runtime memory (aka. only for the duration of the store instane).\n *\n * Usually you wouldn't use it directly and instead use the builtin LocalAuthStore, AsyncAuthStore\n * or extend it with your own custom implementation.\n */\nexport class BaseAuthStore {\n    protected baseToken: string = \"\";\n    protected baseModel: AuthRecord = null;\n\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get record(): AuthRecord {\n        return this.baseModel;\n    }\n\n    /**\n     * @deprecated use `record` instead.\n     */\n    get model(): AuthRecord {\n        return this.baseModel;\n    }\n\n    /**\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Checks whether the current store state is for admin authentication.\n     */\n    get isAdmin(): boolean {\n        return getTokenPayload(this.token).type === \"admin\";\n    }\n\n    /**\n     * Checks whether the current store state is for auth record authentication.\n     */\n    get isAuthRecord(): boolean {\n        return getTokenPayload(this.token).type === \"authRecord\";\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, record?: AuthRecord): void {\n        this.baseToken = token || \"\";\n        this.baseModel = record || null;\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = \"\";\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     *\n     * NB! This function doesn't validate the token or its data.\n     * Usually this isn't a concern if you are interacting only with the\n     * PocketBase API because it has the proper server-side security checks in place,\n     * but if you are using the store `isValid` state for permission controls\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\n     * after loading the cookie to ensure an up-to-date token and model state.\n     * For example:\n     *\n     * ```js\n     * pb.authStore.loadFromCookie(\"cookie string...\");\n     *\n     * try {\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\n     * } catch (_) {\n     *     // clear the auth store on failed refresh\n     *     pb.authStore.clear();\n     * }\n     * ```\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || \"\")[key] || \"\";\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== \"object\" || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || \"\", data.record || data.model || null);\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure: true,\n            sameSite: true,\n            httpOnly: true,\n            path: \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date(\"1970-01-01\");\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            record: this.record ? JSON.parse(JSON.stringify(this.record)) : null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength =\n            typeof Blob !== \"undefined\" ? new Blob([result]).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.record && resultLength > 4096) {\n            rawData.record = { id: rawData.record?.id, email: rawData.record?.email };\n            const extraProps = [\"collectionId\", \"collectionName\", \"verified\"];\n            for (const prop in this.record) {\n                if (extraProps.includes(prop)) {\n                    rawData.record[prop] = this.record[prop];\n                }\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * You can set the `fireImmediately` argument to true in order to invoke\n     * the provided callback right after registration.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        if (fireImmediately) {\n            callback(this.token, this.record);\n        }\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i]; // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        };\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.record);\n        }\n    }\n}\n","import { BaseAuthStore, AuthRecord } from \"@/stores/BaseAuthStore\";\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (e.g. in node env).\n */\nexport class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string;\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n\n        this._bindStorageEvent();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || \"\";\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get record(): AuthRecord {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.record || data.model || null;\n    }\n\n    /**\n     * @deprecated use `record` instead.\n     */\n    get model(): AuthRecord {\n        return this.record;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, record?: AuthRecord) {\n        this._storageSet(this.storageKey, {\n            token: token,\n            record: record,\n        });\n\n        super.save(token, record);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            const rawValue = window.localStorage.getItem(key) || \"\";\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) {\n                // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== \"string\") {\n                normalizedVal = JSON.stringify(value);\n            }\n            window.localStorage.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== \"undefined\" && window?.localStorage) {\n            window.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n\n    /**\n     * Updates the current store state on localStorage change.\n     */\n    private _bindStorageEvent() {\n        if (\n            typeof window === \"undefined\" ||\n            !window?.localStorage ||\n            !window.addEventListener\n        ) {\n            return;\n        }\n\n        window.addEventListener(\"storage\", (e) => {\n            if (e.key != this.storageKey) {\n                return;\n            }\n\n            const data = this._storageGet(this.storageKey) || {};\n\n            super.save(data.token || \"\", data.record || data.model || null);\n        });\n    }\n}\n","import Client from \"@/Client\";\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport abstract class BaseService {\n    readonly client: Client;\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\ninterface appleClientSecret {\n    secret: string;\n}\n\nexport class SettingsService extends BaseService {\n    /**\n     * Fetch all available app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getAll(options?: CommonOptions): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Bulk updates app settings.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: any }> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings\", options);\n    }\n\n    /**\n     * Performs a S3 filesystem connection test.\n     *\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\n     *\n     * @throws {ClientResponseError}\n     */\n    async testS3(\n        filesystem: string = \"storage\",\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    filesystem: filesystem,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/s3\", options).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     *\n     * @throws {ClientResponseError}\n     */\n    async testEmail(\n        collectionIdOrName: string,\n        toEmail: string,\n        emailTemplate: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    email:      toEmail,\n                    template:   emailTemplate,\n                    collection: collectionIdOrName,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/test/email\", options).then(() => true);\n    }\n\n    /**\n     * Generates a new Apple OAuth2 client secret.\n     *\n     * @throws {ClientResponseError}\n     */\n    async generateAppleClientSecret(\n        clientId: string,\n        teamId: string,\n        keyId: string,\n        privateKey: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<appleClientSecret> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    clientId,\n                    teamId,\n                    keyId,\n                    privateKey,\n                    duration,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/settings/apple/generate-client-secret\", options);\n    }\n}\n","export interface SendOptions extends RequestInit {\n    // for backward compatibility and to minimize the verbosity,\n    // any top-level field that doesn't exist in RequestInit or the\n    // fields below will be treated as query parameter.\n    [key: string]: any;\n\n    /**\n     * Optional custom fetch function to use for sending the request.\n     */\n    fetch?: (url: RequestInfo | URL, config?: RequestInit) => Promise<Response>;\n\n    /**\n     * Custom headers to send with the requests.\n     */\n    headers?: { [key: string]: string };\n\n    /**\n     * The body of the request (serialized automatically for json requests).\n     */\n    body?: any;\n\n    /**\n     * Query parameters that will be appended to the request url.\n     */\n    query?: { [key: string]: any };\n\n    /**\n     * @deprecated use `query` instead\n     *\n     * for backward-compatibility `params` values are merged with `query`,\n     * but this option may get removed in the final v1 release\n     */\n    params?: { [key: string]: any };\n\n    /**\n     * The request identifier that can be used to cancel pending requests.\n     */\n    requestKey?: string | null;\n\n    /**\n     * @deprecated use `requestKey:string` instead\n     */\n    $cancelKey?: string;\n\n    /**\n     * @deprecated use `requestKey:null` instead\n     */\n    $autoCancel?: boolean;\n}\n\nexport interface CommonOptions extends SendOptions {\n    fields?: string;\n}\n\nexport interface ListOptions extends CommonOptions {\n    page?: number;\n    perPage?: number;\n    sort?: string;\n    filter?: string;\n    skipTotal?: boolean;\n}\n\nexport interface FullListOptions extends ListOptions {\n    batch?: number;\n}\n\nexport interface RecordOptions extends CommonOptions {\n    expand?: string;\n}\n\nexport interface RecordListOptions extends ListOptions, RecordOptions {}\n\nexport interface RecordFullListOptions extends FullListOptions, RecordOptions {}\n\nexport interface LogStatsOptions extends CommonOptions {\n    filter?: string;\n}\n\nexport interface FileOptions extends CommonOptions {\n    thumb?: string;\n    download?: boolean;\n}\n\nexport interface AuthOptions extends CommonOptions {\n    /**\n     * If autoRefreshThreshold is set it will take care to auto refresh\n     * when necessary the auth data before each request to ensure that\n     * the auth state is always valid.\n     *\n     * The value must be in seconds, aka. the amount of seconds\n     * that will be subtracted from the current token `exp` claim in order\n     * to determine whether it is going to expire within the specified time threshold.\n     *\n     * For example, if you want to auto refresh the token if it is\n     * going to expire in the next 30mins (or already has expired),\n     * it can be set to `1800`\n     */\n    autoRefreshThreshold?: number;\n}\n\n// -------------------------------------------------------------------\n\n// list of known SendOptions keys (everything else is treated as query param)\nconst knownSendOptionsKeys = [\n    \"requestKey\",\n    \"$cancelKey\",\n    \"$autoCancel\",\n    \"fetch\",\n    \"headers\",\n    \"body\",\n    \"query\",\n    \"params\",\n    // ---,\n    \"cache\",\n    \"credentials\",\n    \"headers\",\n    \"integrity\",\n    \"keepalive\",\n    \"method\",\n    \"mode\",\n    \"redirect\",\n    \"referrer\",\n    \"referrerPolicy\",\n    \"signal\",\n    \"window\",\n];\n\n// modifies in place the provided options by moving unknown send options as query parameters.\nexport function normalizeUnknownQueryParams(options?: SendOptions): void {\n    if (!options) {\n        return;\n    }\n\n    options.query = options.query || {};\n    for (let key in options) {\n        if (knownSendOptionsKeys.includes(key)) {\n            continue;\n        }\n\n        options.query[key] = options[key];\n        delete options[key];\n    }\n}\n\nexport function serializeQueryParams(params: { [key: string]: any }): string {\n    const result: Array<string> = [];\n\n    for (const key in params) {\n        if (params[key] === null) {\n            // skip null query params\n            continue;\n        }\n\n        const value = params[key];\n        const encodedKey = encodeURIComponent(key);\n\n        if (Array.isArray(value)) {\n            // repeat array params\n            for (const v of value) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(v));\n            }\n        } else if (value instanceof Date) {\n            result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n        } else if (typeof value !== null && typeof value === \"object\") {\n            result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n        } else {\n            result.push(encodedKey + \"=\" + encodeURIComponent(value));\n        }\n    }\n\n    return result.join(\"&\");\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/BaseService\";\nimport { SendOptions, normalizeUnknownQueryParams } from \"@/tools/options\";\n\ninterface promiseCallbacks {\n    resolve: Function;\n    reject: Function;\n}\n\ntype Subscriptions = { [key: string]: Array<EventListener> };\n\nexport type UnsubscribeFunc = () => Promise<void>;\n\nexport class RealtimeService extends BaseService {\n    clientId: string = \"\";\n\n    private eventSource: EventSource | null = null;\n    private subscriptions: Subscriptions = {};\n    private lastSentSubscriptions: Array<string> = [];\n    private connectTimeoutId: any;\n    private maxConnectTimeout: number = 15000;\n    private reconnectTimeoutId: any;\n    private reconnectAttempts: number = 0;\n    private maxReconnectAttempts: number = Infinity;\n    private predefinedReconnectIntervals: Array<number> = [\n        200, 300, 500, 1000, 1200, 1500, 2000,\n    ];\n    private pendingConnects: Array<promiseCallbacks> = [];\n\n    /**\n     * Returns whether the realtime connection has been established.\n     */\n    get isConnected(): boolean {\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\n    }\n\n    /**\n     * Register the subscription listener.\n     *\n     * You can subscribe multiple times to the same topic.\n     *\n     * If the SSE connection is not started yet,\n     * this method will also initialize it.\n     */\n    async subscribe(\n        topic: string,\n        callback: (data: any) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"topic must be set.\");\n        }\n\n        let key = topic;\n\n        // serialize and append the topic options (if any)\n        if (options) {\n            options = Object.assign({}, options); // shallow copy\n            normalizeUnknownQueryParams(options)\n            const serialized =\n                \"options=\" +\n                encodeURIComponent(\n                    JSON.stringify({ query: options.query, headers: options.headers }),\n                );\n            key += (key.includes(\"?\") ? \"&\" : \"?\") + serialized;\n        }\n\n        const listener = function (e: Event) {\n            const msgEvent = e as MessageEvent;\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        };\n\n        // store the listener\n        if (!this.subscriptions[key]) {\n            this.subscriptions[key] = [];\n        }\n        this.subscriptions[key].push(listener);\n\n        if (!this.isConnected) {\n            // initialize sse connection\n            await this.connect();\n        } else if (this.subscriptions[key].length === 1) {\n            // send the updated subscriptions (if it is the first for the key)\n            await this.submitSubscriptions();\n        } else {\n            // only register the listener\n            this.eventSource?.addEventListener(key, listener);\n        }\n\n        return async (): Promise<void> => {\n            return this.unsubscribeByTopicAndListener(topic, listener);\n        };\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners with the specified topic.\n     *\n     * If `topic` is not provided, then this method will unsubscribe\n     * from all active subscriptions.\n     *\n     * This method is no-op if there are no active subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        let needToSubmit = false;\n\n        if (!topic) {\n            // remove all subscriptions\n            this.subscriptions = {};\n        } else {\n            // remove all listeners related to the topic\n            const subs = this.getSubscriptionsByTopic(topic);\n            for (let key in subs) {\n                if (!this.hasSubscriptionListeners(key)) {\n                    continue; // already unsubscribed\n                }\n\n                for (let listener of this.subscriptions[key]) {\n                    this.eventSource?.removeEventListener(key, listener);\n                }\n                delete this.subscriptions[key];\n\n                // mark for subscriptions change submit if there are no other listeners\n                if (!needToSubmit) {\n                    needToSubmit = true;\n                }\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\n     *\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByPrefix(keyPrefix: string): Promise<void> {\n        let hasAtleastOneTopic = false;\n        for (let key in this.subscriptions) {\n            // \"?\" so that it can be used as end delimiter for the prefix\n            if (!(key + \"?\").startsWith(keyPrefix)) {\n                continue;\n            }\n\n            hasAtleastOneTopic = true;\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            delete this.subscriptions[key];\n        }\n\n        if (!hasAtleastOneTopic) {\n            return; // nothing to unsubscribe from\n        }\n\n        if (this.hasSubscriptionListeners()) {\n            // submit the deleted subscriptions\n            await this.submitSubscriptions();\n        } else {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        }\n    }\n\n    /**\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\n     *\n     * This method is no-op if there are no active subscription with\n     * the specified topic and listener.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operation there are no active subscriptions left.\n     */\n    async unsubscribeByTopicAndListener(\n        topic: string,\n        listener: EventListener,\n    ): Promise<void> {\n        let needToSubmit = false;\n\n        const subs = this.getSubscriptionsByTopic(topic);\n        for (let key in subs) {\n            if (\n                !Array.isArray(this.subscriptions[key]) ||\n                !this.subscriptions[key].length\n            ) {\n                continue; // already unsubscribed\n            }\n\n            let exist = false;\n            for (let i = this.subscriptions[key].length - 1; i >= 0; i--) {\n                if (this.subscriptions[key][i] !== listener) {\n                    continue;\n                }\n\n                exist = true; // has at least one matching listener\n                delete this.subscriptions[key][i]; // removes the function reference\n                this.subscriptions[key].splice(i, 1); // reindex the array\n                this.eventSource?.removeEventListener(key, listener);\n            }\n            if (!exist) {\n                continue;\n            }\n\n            // remove the key from the subscriptions list if there are no other listeners\n            if (!this.subscriptions[key].length) {\n                delete this.subscriptions[key];\n            }\n\n            // mark for subscriptions change submit if there are no other listeners\n            if (!needToSubmit && !this.hasSubscriptionListeners(key)) {\n                needToSubmit = true;\n            }\n        }\n\n        if (!this.hasSubscriptionListeners()) {\n            // no other active subscriptions -> close the sse connection\n            this.disconnect();\n        } else if (needToSubmit) {\n            await this.submitSubscriptions();\n        }\n    }\n\n    private hasSubscriptionListeners(keyToCheck?: string): boolean {\n        this.subscriptions = this.subscriptions || {};\n\n        // check the specified key\n        if (keyToCheck) {\n            return !!this.subscriptions[keyToCheck]?.length;\n        }\n\n        // check for at least one non-empty subscription\n        for (let key in this.subscriptions) {\n            if (!!this.subscriptions[key]?.length) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private async submitSubscriptions(): Promise<void> {\n        if (!this.clientId) {\n            return; // no client/subscriber\n        }\n\n        // optimistic update\n        this.addAllSubscriptionListeners();\n\n        this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys();\n\n        return this.client\n            .send(\"/api/realtime\", {\n                method: \"POST\",\n                body: {\n                    clientId: this.clientId,\n                    subscriptions: this.lastSentSubscriptions,\n                },\n                requestKey: this.getSubscriptionsCancelKey(),\n            })\n            .catch((err) => {\n                if (err?.isAbort) {\n                    return; // silently ignore aborted pending requests\n                }\n                throw err;\n            });\n    }\n\n    private getSubscriptionsCancelKey(): string {\n        return \"realtime_\" + this.clientId;\n    }\n\n    private getSubscriptionsByTopic(topic: string): Subscriptions {\n        const result: Subscriptions = {};\n\n        // \"?\" so that it can be used as end delimiter for the topic\n        topic = topic.includes(\"?\") ? topic : topic + \"?\";\n\n        for (let key in this.subscriptions) {\n            if ((key + \"?\").startsWith(topic)) {\n                result[key] = this.subscriptions[key];\n            }\n        }\n\n        return result;\n    }\n\n    private getNonEmptySubscriptionKeys(): Array<string> {\n        const result: Array<string> = [];\n\n        for (let key in this.subscriptions) {\n            if (this.subscriptions[key].length) {\n                result.push(key);\n            }\n        }\n\n        return result;\n    }\n\n    private addAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeAllSubscriptionListeners();\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.addEventListener(key, listener);\n            }\n        }\n    }\n\n    private removeAllSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let key in this.subscriptions) {\n            for (let listener of this.subscriptions[key]) {\n                this.eventSource.removeEventListener(key, listener);\n            }\n        }\n    }\n\n    private async connect(): Promise<void> {\n        if (this.reconnectAttempts > 0) {\n            // immediately resolve the promise to avoid indefinitely\n            // blocking the client during reconnection\n            return;\n        }\n\n        return new Promise((resolve, reject) => {\n            this.pendingConnects.push({ resolve, reject });\n\n            if (this.pendingConnects.length > 1) {\n                // all promises will be resolved once the connection is established\n                return;\n            }\n\n            this.initConnect();\n        });\n    }\n\n    private initConnect() {\n        this.disconnect(true);\n\n        // wait up to 15s for connect\n        clearTimeout(this.connectTimeoutId);\n        this.connectTimeoutId = setTimeout(() => {\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\n        }, this.maxConnectTimeout);\n\n        this.eventSource = new EventSource(this.client.buildUrl(\"/api/realtime\"));\n\n        this.eventSource.onerror = (_) => {\n            this.connectErrorHandler(\n                new Error(\"Failed to establish realtime connection.\"),\n            );\n        };\n\n        this.eventSource.addEventListener(\"PB_CONNECT\", (e) => {\n            const msgEvent = e as MessageEvent;\n            this.clientId = msgEvent?.lastEventId;\n\n            this.submitSubscriptions()\n                .then(async () => {\n                    let retries = 3;\n                    while (this.hasUnsentSubscriptions() && retries > 0) {\n                        retries--;\n                        // resubscribe to ensure that the latest topics are submitted\n                        //\n                        // This is needed because missed topics could happen on reconnect\n                        // if after the pending sent `submitSubscriptions()` call another `subscribe()`\n                        // was made before the submit was able to complete.\n                        await this.submitSubscriptions();\n                    }\n                })\n                .then(() => {\n                    for (let p of this.pendingConnects) {\n                        p.resolve();\n                    }\n\n                    // reset connect meta\n                    this.pendingConnects = [];\n                    this.reconnectAttempts = 0;\n                    clearTimeout(this.reconnectTimeoutId);\n                    clearTimeout(this.connectTimeoutId);\n\n                    // propagate the PB_CONNECT event\n                    const connectSubs = this.getSubscriptionsByTopic(\"PB_CONNECT\");\n                    for (let key in connectSubs) {\n                        for (let listener of connectSubs[key]) {\n                            listener(e);\n                        }\n                    }\n                })\n                .catch((err) => {\n                    this.clientId = \"\";\n                    this.connectErrorHandler(err);\n                });\n        });\n    }\n\n    private hasUnsentSubscriptions(): boolean {\n        const latestTopics = this.getNonEmptySubscriptionKeys();\n        if (latestTopics.length != this.lastSentSubscriptions.length) {\n            return true;\n        }\n\n        for (const t of latestTopics) {\n            if (!this.lastSentSubscriptions.includes(t)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private connectErrorHandler(err: any) {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n\n        if (\n            // wasn't previously connected -> direct reject\n            (!this.clientId && !this.reconnectAttempts) ||\n            // was previously connected but the max reconnection limit has been reached\n            this.reconnectAttempts > this.maxReconnectAttempts\n        ) {\n            for (let p of this.pendingConnects) {\n                p.reject(new ClientResponseError(err));\n            }\n            this.pendingConnects = [];\n            this.disconnect();\n            return;\n        }\n\n        // otherwise -> reconnect in the background\n        this.disconnect(true);\n        const timeout =\n            this.predefinedReconnectIntervals[this.reconnectAttempts] ||\n            this.predefinedReconnectIntervals[\n                this.predefinedReconnectIntervals.length - 1\n            ];\n        this.reconnectAttempts++;\n        this.reconnectTimeoutId = setTimeout(() => {\n            this.initConnect();\n        }, timeout);\n    }\n\n    private disconnect(fromReconnect = false): void {\n        clearTimeout(this.connectTimeoutId);\n        clearTimeout(this.reconnectTimeoutId);\n        this.removeAllSubscriptionListeners();\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n\n        if (!fromReconnect) {\n            this.reconnectAttempts = 0;\n\n            // resolve any remaining connect promises\n            //\n            // this is done to avoid unnecessary throwing errors in case\n            // unsubscribe is called before the pending connect promises complete\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\n            for (let p of this.pendingConnects) {\n                p.resolve();\n            }\n            this.pendingConnects = [];\n        }\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { ListResult } from \"@/tools/dtos\";\nimport { CommonOptions, ListOptions, FullListOptions } from \"@/tools/options\";\n\nexport abstract class CrudService<M> extends BaseService {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract get baseCrudPath(): string;\n\n    /**\n     * Response data decoder.\n     */\n    decode<T = M>(data: { [key: string]: any }): T {\n        return data as T;\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once\n     * (by default 500 items per request; to change it set the `batch` query param).\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>;\n\n    /**\n     * Legacy version of getFullList with explicitly specified batch size.\n     */\n    async getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>;\n\n    async getFullList<T = M>(\n        batchOrqueryParams?: number | FullListOptions,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrqueryParams == \"number\") {\n            return this._getFullList<T>(batchOrqueryParams, options);\n        }\n\n        options = Object.assign({}, batchOrqueryParams, options);\n\n        let batch = 500;\n        if (options.batch) {\n            batch = options.batch;\n            delete options.batch;\n        }\n\n        return this._getFullList<T>(batch, options);\n    }\n\n    /**\n     * Returns paginated items list.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<T>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(this.baseCrudPath, options).then((responseData: any) => {\n            responseData.items =\n                responseData.items?.map((item: any) => {\n                    return this.decode<T>(item);\n                }) || [];\n\n            return responseData;\n        });\n    }\n\n    /**\n     * Returns the first found item by the specified filter.\n     *\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\n     * returns the first found item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * For consistency with `getOne`, this method will throw a 404\n     * ClientResponseError if no item was found.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\n        options = Object.assign(\n            {\n                requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + filter,\n            },\n            options,\n        );\n\n        options.query = Object.assign(\n            {\n                filter: filter,\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        return this.getList<T>(1, 1, options).then((result) => {\n            if (!result?.items?.length) {\n                throw new ClientResponseError({\n                    status: 404,\n                    response: {\n                        code: 404,\n                        message: \"The requested resource wasn't found.\",\n                        data: {},\n                    },\n                });\n            }\n\n            return result.items[0];\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildUrl(this.baseCrudPath + \"/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required record id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath, options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     *\n     * You can use the generic T to supply a wrapper type of the crud model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<T> {\n        options = Object.assign(\n            {\n                method: \"PATCH\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then((responseData: any) => this.decode<T>(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\n            .then(() => true);\n    }\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList<T = M>(\n        batchSize = 500,\n        options?: ListOptions,\n    ): Promise<Array<T>> {\n        options = options || {};\n        options.query = Object.assign(\n            {\n                skipTotal: 1,\n            },\n            options.query,\n        );\n\n        let result: Array<T> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this.getList(page, batchSize || 500, options).then((list) => {\n                const castedList = list as any as ListResult<T>;\n                const items = castedList.items;\n\n                result = result.concat(items);\n\n                if (items.length == list.perPage) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        };\n\n        return request(1);\n    }\n}\n","import { SendOptions } from \"@/tools/options\";\n\nexport function normalizeLegacyOptionsArgs(\n    legacyWarn: string,\n    baseOptions: SendOptions,\n    bodyOrOptions?: any,\n    query?: any,\n): SendOptions {\n    const hasBodyOrOptions = typeof bodyOrOptions !== \"undefined\";\n    const hasQuery = typeof query !== \"undefined\";\n\n    if (!hasQuery && !hasBodyOrOptions) {\n        return baseOptions;\n    }\n\n    if (hasQuery) {\n        console.warn(legacyWarn);\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\n\n        return baseOptions;\n    }\n\n    return Object.assign(baseOptions, bodyOrOptions);\n}\n","import Client from \"@/Client\";\nimport { isTokenExpired } from \"@/tools/jwt\";\n\n// reset previous auto refresh registrations\nexport function resetAutoRefresh(client: Client) {\n    (client as any)._resetAutoRefresh?.();\n}\n\nexport function registerAutoRefresh(\n    client: Client,\n    threshold: number,\n    refreshFunc: () => Promise<any>,\n    reauthenticateFunc: () => Promise<any>,\n) {\n    resetAutoRefresh(client);\n\n    const oldBeforeSend = client.beforeSend;\n    const oldModel = client.authStore.record;\n\n    // unset the auto refresh in case the auth store was cleared\n    // OR a new model was authenticated\n    const unsubStoreChange = client.authStore.onChange((newToken, model) => {\n        if (\n            !newToken ||\n            model?.id != oldModel?.id ||\n            ((model?.collectionId || oldModel?.collectionId) &&\n                model?.collectionId != oldModel?.collectionId)\n        ) {\n            resetAutoRefresh(client);\n        }\n    });\n\n    // initialize a reset function and attach it dynamically to the client\n    (client as any)._resetAutoRefresh = function () {\n        unsubStoreChange();\n        client.beforeSend = oldBeforeSend;\n        delete (client as any)._resetAutoRefresh;\n    };\n\n    client.beforeSend = async (url, sendOptions) => {\n        const oldToken = client.authStore.token;\n\n        if (sendOptions.query?.autoRefresh) {\n            return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n        }\n\n        let isValid = client.authStore.isValid;\n        if (\n            // is loosely valid\n            isValid &&\n            // but it is going to expire in the next \"threshold\" seconds\n            isTokenExpired(client.authStore.token, threshold)\n        ) {\n            try {\n                await refreshFunc();\n            } catch (_) {\n                isValid = false;\n            }\n        }\n\n        // still invalid -> reauthenticate\n        if (!isValid) {\n            await reauthenticateFunc();\n        }\n\n        // the request wasn't sent with a custom token\n        const headers = sendOptions.headers || {};\n        for (let key in headers) {\n            if (\n                key.toLowerCase() == \"authorization\" &&\n                // the request wasn't sent with a custom token\n                oldToken == headers[key] &&\n                client.authStore.token\n            ) {\n                // set the latest store token\n                headers[key] = client.authStore.token;\n                break;\n            }\n        }\n        sendOptions.headers = headers;\n\n        return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\n    };\n}\n","import Client from \"@/Client\";\nimport { ClientResponseError } from \"@/ClientResponseError\";\nimport { RealtimeService, UnsubscribeFunc } from \"@/services/RealtimeService\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { CrudService } from \"@/services/CrudService\";\nimport { ListResult, RecordModel } from \"@/tools/dtos\";\nimport { normalizeLegacyOptionsArgs } from \"@/tools/legacy\";\nimport {\n    CommonOptions,\n    RecordFullListOptions,\n    RecordListOptions,\n    RecordOptions,\n    SendOptions,\n} from \"@/tools/options\";\nimport { getTokenPayload } from \"@/tools/jwt\";\nimport { registerAutoRefresh, resetAutoRefresh } from \"@/tools/refresh\";\n\nexport interface RecordAuthResponse<T = RecordModel> {\n    /**\n     * The signed PocketBase auth record.\n     */\n    record: T;\n\n    /**\n     * The PocketBase record auth token.\n     *\n     * If you are looking for the OAuth2 access and refresh tokens\n     * they are available under the `meta.accessToken` and `meta.refreshToken` props.\n     */\n    token: string;\n\n    /**\n     * Auth meta data usually filled when OAuth2 is used.\n     */\n    meta?: { [key: string]: any };\n}\n\nexport interface AuthProviderInfo {\n    name: string;\n    displayName: string;\n    state: string;\n    authUrl: string;\n    codeVerifier: string;\n    codeChallenge: string;\n    codeChallengeMethod: string;\n}\n\nexport interface AuthMethodsList {\n    mfa: {\n        enabled: boolean;\n        duration: number;\n    };\n    otp: {\n        enabled: boolean;\n        duration: number;\n    };\n    password: {\n        enabled: boolean;\n        identityFields: Array<string>;\n    };\n    oauth2: {\n        enabled: boolean;\n        providers: Array<AuthProviderInfo>;\n    };\n}\n\nexport interface RecordSubscription<T = RecordModel> {\n    action: string; // eg. create, update, delete\n    record: T;\n}\n\nexport type OAuth2UrlCallback = (url: string) => void | Promise<void>;\n\nexport interface OAuth2AuthConfig extends SendOptions {\n    // the name of the OAuth2 provider (eg. \"google\")\n    provider: string;\n\n    // custom scopes to overwrite the default ones\n    scopes?: Array<string>;\n\n    // optional record create data\n    createData?: { [key: string]: any };\n\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\n    urlCallback?: OAuth2UrlCallback;\n\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\n    query?: RecordOptions;\n}\n\nexport interface OTPResponse {\n    otpId: string;\n}\n\nexport class RecordService<M = RecordModel> extends CrudService<M> {\n    readonly collectionIdOrName: string;\n\n    constructor(client: Client, collectionIdOrName: string) {\n        super(client);\n\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return this.baseCollectionPath + \"/records\";\n    }\n\n    /**\n     * Returns the current collection service base path.\n     */\n    get baseCollectionPath(): string {\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\n    }\n\n    /**\n     * Returns whether the current service collection is superusers.\n     */\n    get isSuperusers(): boolean {\n        return (\n            this.collectionIdOrName == \"_superusers\" ||\n            this.collectionIdOrName == \"_pbc_2773867675\"\n        );\n    }\n\n    // ---------------------------------------------------------------\n    // Realtime handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\n     *\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\n     * any record changes in the collection.\n     *\n     * If `topic` is a record id, then this method will subscribe only\n     * to changes of the specified record id.\n     *\n     * It's OK to subscribe multiple times to the same topic.\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\n     */\n    async subscribe<T = M>(\n        topic: string,\n        callback: (data: RecordSubscription<T>) => void,\n        options?: SendOptions,\n    ): Promise<UnsubscribeFunc> {\n        if (!topic) {\n            throw new Error(\"Missing topic.\");\n        }\n\n        if (!callback) {\n            throw new Error(\"Missing subscription callback.\");\n        }\n\n        return this.client.realtime.subscribe(\n            this.collectionIdOrName + \"/\" + topic,\n            callback,\n            options,\n        );\n    }\n\n    /**\n     * Unsubscribe from all subscriptions of the specified topic\n     * (\"*\" or record id).\n     *\n     * If `topic` is not set, then this method will unsubscribe from\n     * all subscriptions associated to the current collection.\n     */\n    async unsubscribe(topic?: string): Promise<void> {\n        // unsubscribe from the specified topic\n        if (topic) {\n            return this.client.realtime.unsubscribe(\n                this.collectionIdOrName + \"/\" + topic,\n            );\n        }\n\n        // unsubscribe from everything related to the collection\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\n    }\n\n    // ---------------------------------------------------------------\n    // Crud handers\n    // ---------------------------------------------------------------\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(options?: RecordFullListOptions): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batch?: number,\n        options?: RecordListOptions,\n    ): Promise<Array<T>>;\n\n    /**\n     * @inheritdoc\n     */\n    async getFullList<T = M>(\n        batchOrOptions?: number | RecordFullListOptions,\n        options?: RecordListOptions,\n    ): Promise<Array<T>> {\n        if (typeof batchOrOptions == \"number\") {\n            return super.getFullList<T>(batchOrOptions, options);\n        }\n\n        const params = Object.assign({}, batchOrOptions, options);\n\n        return super.getFullList<T>(params);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getList<T = M>(\n        page = 1,\n        perPage = 30,\n        options?: RecordListOptions,\n    ): Promise<ListResult<T>> {\n        return super.getList<T>(page, perPage, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getFirstListItem<T = M>(\n        filter: string,\n        options?: RecordListOptions,\n    ): Promise<T> {\n        return super.getFirstListItem<T>(filter, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async getOne<T = M>(id: string, options?: RecordOptions): Promise<T> {\n        return super.getOne<T>(id, options);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async create<T = M>(\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.create<T>(bodyParams, options);\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.record` matches with the updated id, then\n     * on success the `client.authStore.record` will be updated with the result.\n     */\n    async update<T = M>(\n        id: string,\n        bodyParams?: { [key: string]: any } | FormData,\n        options?: RecordOptions,\n    ): Promise<T> {\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\n            if (\n                // is record auth\n                this.client.authStore.record?.id === item?.id &&\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.record?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.save(this.client.authStore.token, item);\n            }\n\n            return item as any as T;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * If the current `client.authStore.record` matches with the deleted id,\n     * then on success the `client.authStore` will be cleared.\n     */\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\n        return super.delete(id, options).then((success) => {\n            if (\n                success &&\n                // is record auth\n                this.client.authStore.record?.id === id &&\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\n                    this.client.authStore.record?.collectionName ===\n                        this.collectionIdOrName)\n            ) {\n                this.client.authStore.clear();\n            }\n\n            return success;\n        });\n    }\n\n    // ---------------------------------------------------------------\n    // Auth handlers\n    // ---------------------------------------------------------------\n\n    /**\n     * Prepare successful collection authorization response.\n     */\n    protected authResponse<T = M>(responseData: any): RecordAuthResponse<T> {\n        const record = this.decode(responseData?.record || {});\n\n        this.client.authStore.save(responseData?.token, record as any);\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            token: responseData?.token || \"\",\n            record: record as any as T,\n        });\n    }\n\n    /**\n     * Returns all available collection auth methods.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n                // @todo remove after deleting the pre v0.23 API response fields\n                fields: \"mfa,otp,password,oauth2\",\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCollectionPath + \"/auth-methods\", options);\n    }\n\n    /**\n     * Authenticate a single auth collection record via its username/email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithPassword<T = M>(\n        usernameOrEmail: string,\n        password: string,\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    identity: usernameOrEmail,\n                    password: password,\n                },\n            },\n            options,\n        );\n\n        // note: consider to deprecate\n        let autoRefreshThreshold;\n        if (this.isSuperusers) {\n            autoRefreshThreshold = options.autoRefreshThreshold;\n            delete options.autoRefreshThreshold;\n            if (!options.autoRefresh) {\n                resetAutoRefresh(this.client);\n            }\n        }\n\n        let authData = await this.client.send(\n            this.baseCollectionPath + \"/auth-with-password\",\n            options,\n        );\n\n        authData = this.authResponse<T>(authData);\n\n        if (autoRefreshThreshold && this.isSuperusers) {\n            registerAutoRefresh(\n                this.client,\n                autoRefreshThreshold,\n                () => this.authRefresh({ autoRefresh: true }),\n                () =>\n                    this.authWithPassword<T>(\n                        usernameOrEmail,\n                        password,\n                        Object.assign({ autoRefresh: true }, options),\n                    ),\n            );\n        }\n\n        return authData;\n    }\n\n    /**\n     * Authenticate a single auth collection record with OAuth2 code.\n     *\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        options?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createdData, options?).\n     */\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        body?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>>;\n\n    async authWithOAuth2Code<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                provider: provider,\n                code: code,\n                codeVerifier: codeVerifier,\n                redirectURL: redirectUrl,\n                createData: createData,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData?, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-oauth2\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * @deprecated This form of authWithOAuth2 is deprecated.\n     *\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\n     */\n    async authWithOAuth2<T = M>(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        createData?: { [key: string]: any },\n        bodyParams?: { [key: string]: any },\n        queryParams?: RecordOptions,\n    ): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * Authenticate a single auth collection record with OAuth2\n     * **without custom redirects, deeplinks or even page reload**.\n     *\n     * This method initializes a one-off realtime subscription and will\n     * open a popup window with the OAuth2 vendor page to authenticate.\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\n     * window will be automatically closed and the OAuth2 data sent back\n     * to the user through the previously established realtime connection.\n     *\n     * You can specify an optional `urlCallback` prop to customize\n     * the default url `window.open` behavior.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\n     *\n     * Example:\n     *\n     * ```js\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\n     *     provider: \"google\",\n     * })\n     * ```\n     *\n     * Note1: When creating the OAuth2 app in the provider dashboard\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\n     * as redirect URL.\n     *\n     * Note2: Safari may block the default `urlCallback` popup because\n     * it doesn't allow `window.open` calls as part of an `async` click functions.\n     * To workaround this you can either change your click handler to not be marked as `async`\n     * OR manually call `window.open` before your `async` function and use the\n     * window reference in your own custom `urlCallback` (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061).\n     * For example:\n     * ```js\n     * <button id=\"btn\">Login with Gitlab</button>\n     * ...\n     * document.getElementById(\"btn\").addEventListener(\"click\", () => {\n     *     pb.collection(\"users\").authWithOAuth2({\n     *         provider: \"gitlab\",\n     *     }).then((authData) => {\n     *         console.log(authData)\n     *     }).catch((err) => {\n     *         console.log(err, err.originalError);\n     *     });\n     * })\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOAuth2<T = M>(\n        options: OAuth2AuthConfig,\n    ): Promise<RecordAuthResponse<T>>;\n\n    authWithOAuth2<T = M>(...args: any): Promise<RecordAuthResponse<T>> {\n        // fallback to legacy format\n        if (args.length > 1 || typeof args?.[0] === \"string\") {\n            console.warn(\n                \"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\",\n            );\n            return this.authWithOAuth2Code<T>(\n                args?.[0] || \"\",\n                args?.[1] || \"\",\n                args?.[2] || \"\",\n                args?.[3] || \"\",\n                args?.[4] || {},\n                args?.[5] || {},\n                args?.[6] || {},\n            );\n        }\n\n        const config = args?.[0] || {};\n\n        // open a new popup window in case config.urlCallback is not set\n        //\n        // note: it is opened before any async calls due to Safari restrictions\n        // (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061)\n        let eagerDefaultPopup: Window | null = null;\n        if (!config.urlCallback) {\n            eagerDefaultPopup = openBrowserPopup(undefined);\n        }\n\n        // initialize a one-off realtime service\n        const realtime = new RealtimeService(this.client);\n\n        function cleanup() {\n            eagerDefaultPopup?.close();\n            realtime.unsubscribe();\n        }\n\n        const requestKeyOptions: SendOptions = {};\n        const requestKey = config.requestKey;\n        if (requestKey) {\n            requestKeyOptions.requestKey = requestKey;\n        }\n\n        return this.listAuthMethods(requestKeyOptions)\n            .then((authMethods) => {\n                const provider = authMethods.oauth2.providers.find(\n                    (p) => p.name === config.provider,\n                );\n                if (!provider) {\n                    throw new ClientResponseError(\n                        new Error(`Missing or invalid provider \"${config.provider}\".`),\n                    );\n                }\n\n                const redirectUrl = this.client.buildUrl(\"/api/oauth2-redirect\");\n\n                // find the AbortController associated with the current request key (if any)\n                const cancelController = requestKey\n                    ? this.client[\"cancelControllers\"]?.[requestKey]\n                    : undefined;\n                if (cancelController) {\n                    cancelController.signal.onabort = () => {\n                        cleanup();\n                    };\n                }\n\n                return new Promise(async (resolve, reject) => {\n                    try {\n                        await realtime.subscribe(\"@oauth2\", async (e) => {\n                            const oldState = realtime.clientId;\n\n                            try {\n                                if (!e.state || oldState !== e.state) {\n                                    throw new Error(\"State parameters don't match.\");\n                                }\n\n                                if (e.error || !e.code) {\n                                    throw new Error(\n                                        \"OAuth2 redirect error or missing code: \" +\n                                            e.error,\n                                    );\n                                }\n\n                                // clear the non SendOptions props\n                                const options = Object.assign({}, config);\n                                delete options.provider;\n                                delete options.scopes;\n                                delete options.createData;\n                                delete options.urlCallback;\n\n                                // reset the cancelController listener as it will be triggered by the next api call\n                                if (cancelController?.signal?.onabort) {\n                                    cancelController.signal.onabort = null;\n                                }\n\n                                const authData = await this.authWithOAuth2Code<T>(\n                                    provider.name,\n                                    e.code,\n                                    provider.codeVerifier,\n                                    redirectUrl,\n                                    config.createData,\n                                    options,\n                                );\n\n                                resolve(authData);\n                            } catch (err) {\n                                reject(new ClientResponseError(err));\n                            }\n\n                            cleanup();\n                        });\n\n                        const replacements: { [key: string]: any } = {\n                            state: realtime.clientId,\n                        };\n                        if (config.scopes?.length) {\n                            replacements[\"scope\"] = config.scopes.join(\" \");\n                        }\n\n                        const url = this._replaceQueryParams(\n                            provider.authUrl + redirectUrl,\n                            replacements,\n                        );\n\n                        let urlCallback =\n                            config.urlCallback ||\n                            function (url: string) {\n                                if (eagerDefaultPopup) {\n                                    eagerDefaultPopup.location.href = url;\n                                } else {\n                                    // it could have been blocked due to its empty initial url,\n                                    // try again...\n                                    eagerDefaultPopup = openBrowserPopup(url);\n                                }\n                            };\n\n                        await urlCallback(url);\n                    } catch (err) {\n                        cleanup();\n                        reject(new ClientResponseError(err));\n                    }\n                });\n            })\n            .catch((err) => {\n                cleanup();\n                throw err; // rethrow\n            }) as Promise<RecordAuthResponse<T>>;\n    }\n\n    /**\n     * Refreshes the current authenticated record instance and\n     * returns a new token and record data.\n     *\n     * On success this method also automatically updates the client's AuthStore.\n     *\n     * @throws {ClientResponseError}\n     */\n    async authRefresh<T = M>(options?: RecordOptions): Promise<RecordAuthResponse<T>>;\n\n    /**\n     * @deprecated\n     * Consider using authRefresh(options?).\n     */\n    async authRefresh<T = M>(body?: any, query?: any): Promise<RecordAuthResponse<T>>;\n\n    async authRefresh<T = M>(\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<RecordAuthResponse<T>> {\n        let options: any = {\n            method: \"POST\",\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-refresh\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Sends auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestPasswordReset(email, options?).\n     */\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestPasswordReset(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record password reset request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\n     */\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: passwordResetToken,\n                password: password,\n                passwordConfirm: passwordConfirm,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-password-reset\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record verification email request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestVerification(email: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestVerification(email, options?).\n     */\n    async requestVerification(email: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestVerification(\n        email: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                email: email,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-verification\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record email verification request.\n     *\n     * If the current `client.authStore.record` matches with the auth record from the token,\n     * then on success the `client.authStore.record.verified` will be updated to `true`.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmVerification(\n        verificationToken: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmVerification(verificationToken, options?).\n     */\n    async confirmVerification(\n        verificationToken: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmVerification(\n        verificationToken: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: verificationToken,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-verification\", options)\n            .then(() => {\n                // on success manually update the current auth record verified state\n                const payload = getTokenPayload(verificationToken);\n                const model = this.client.authStore.record;\n                if (\n                    model &&\n                    !model.verified &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    model.verified = true;\n                    this.client.authStore.save(this.client.authStore.token, model);\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * Sends an email change request to the authenticated record model.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using requestEmailChange(newEmail, options?).\n     */\n    async requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>;\n\n    async requestEmailChange(\n        newEmail: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                newEmail: newEmail,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/request-email-change\", options)\n            .then(() => true);\n    }\n\n    /**\n     * Confirms auth record's new email address.\n     *\n     * If the current `client.authStore.record` matches with the auth record from the token,\n     * then on success the `client.authStore` will be cleared.\n     *\n     * @throws {ClientResponseError}\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<boolean>;\n\n    /**\n     * @deprecated\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\n     */\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        body?: any,\n        query?: any,\n    ): Promise<boolean>;\n\n    async confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyOrOptions?: any,\n        query?: any,\n    ): Promise<boolean> {\n        let options: any = {\n            method: \"POST\",\n            body: {\n                token: emailChangeToken,\n                password: password,\n            },\n        };\n\n        options = normalizeLegacyOptionsArgs(\n            \"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\",\n            options,\n            bodyOrOptions,\n            query,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/confirm-email-change\", options)\n            .then(() => {\n                const payload = getTokenPayload(emailChangeToken);\n                const model = this.client.authStore.record;\n                if (\n                    model &&\n                    model.id === payload.id &&\n                    model.collectionId === payload.collectionId\n                ) {\n                    this.client.authStore.clear();\n                }\n\n                return true;\n            });\n    }\n\n    /**\n     * @deprecated use collection(\"_externalAuths\").*\n     *\n     * Lists all linked external auth providers for the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async listExternalAuths(\n        recordId: string,\n        options?: CommonOptions,\n    ): Promise<Array<RecordModel>> {\n        return this.client.collection(\"_externalAuths\").getFullList(\n            Object.assign({}, options, {\n                filter: this.client.filter(\"recordRef = {:id}\", { id: recordId }),\n            }),\n        );\n    }\n\n    /**\n     * @deprecated use collection(\"_externalAuths\").*\n     *\n     * Unlink a single external auth provider from the specified auth record.\n     *\n     * @throws {ClientResponseError}\n     */\n    async unlinkExternalAuth(\n        recordId: string,\n        provider: string,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        const ea = await this.client.collection(\"_externalAuths\").getFirstListItem(\n            this.client.filter(\"recordRef = {:recordId} && provider = {:provider}\", {\n                recordId,\n                provider,\n            }),\n        );\n\n        return this.client\n            .collection(\"_externalAuths\")\n            .delete(ea.id, options)\n            .then(() => true);\n    }\n\n    /**\n     * Sends auth record OTP to the provided email.\n     *\n     * @throws {ClientResponseError}\n     */\n    async requestOTP(email: string, options?: CommonOptions): Promise<OTPResponse> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { email: email },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCollectionPath + \"/request-otp\", options);\n    }\n\n    /**\n     * Authenticate a single auth collection record via OTP.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - the authentication token\n     * - the authenticated record model\n     *\n     * @throws {ClientResponseError}\n     */\n    async authWithOTP<T = M>(\n        otpId: string,\n        password: string,\n        options?: CommonOptions,\n    ): Promise<RecordAuthResponse<T>> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { otpId, password },\n            },\n            options,\n        );\n\n        return this.client\n            .send(this.baseCollectionPath + \"/auth-with-otp\", options)\n            .then((data) => this.authResponse<T>(data));\n    }\n\n    /**\n     * Impersonate authenticates with the specified recordId and\n     * returns a new client with the received auth token in a memory store.\n     *\n     * If `duration` is 0 the generated auth token will fallback\n     * to the default collection auth token duration.\n     *\n     * This action currently requires superusers privileges.\n     *\n     * @throws {ClientResponseError}\n     */\n    async impersonate(\n        recordId: string,\n        duration: number,\n        options?: CommonOptions,\n    ): Promise<Client> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: { duration: duration },\n            },\n            options,\n        );\n        options.headers = options.headers || {};\n        if (!options.headers.Authorization) {\n            options.headers.Authorization = this.client.authStore.token;\n        }\n\n        // create a new client loaded with the impersonated auth state\n        // ---\n        const client = new Client(this.client.baseUrl, new BaseAuthStore(), this.client.lang);\n\n        const authData = await client.send(\n            this.baseCollectionPath + \"/impersonate/\" + encodeURIComponent(recordId),\n            options,\n        );\n\n        client.authStore.save(authData?.token, this.decode(authData?.record || {}));\n        // ---\n\n        return client;\n    }\n\n    // ---------------------------------------------------------------\n\n    // very rudimentary url query params replacement because at the moment\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\n    //\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\n    private _replaceQueryParams(\n        url: string,\n        replacements: { [key: string]: any } = {},\n    ): string {\n        let urlPath = url;\n        let query = \"\";\n\n        const queryIndex = url.indexOf(\"?\");\n        if (queryIndex >= 0) {\n            urlPath = url.substring(0, url.indexOf(\"?\"));\n            query = url.substring(url.indexOf(\"?\") + 1);\n        }\n\n        const parsedParams: { [key: string]: string } = {};\n\n        // parse the query parameters\n        const rawParams = query.split(\"&\");\n        for (const param of rawParams) {\n            if (param == \"\") {\n                continue;\n            }\n\n            const pair = param.split(\"=\");\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g, \" \"))] =\n                decodeURIComponent((pair[1] || \"\").replace(/\\+/g, \" \"));\n        }\n\n        // apply the replacements\n        for (let key in replacements) {\n            if (!replacements.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (replacements[key] == null) {\n                delete parsedParams[key];\n            } else {\n                parsedParams[key] = replacements[key];\n            }\n        }\n\n        // construct back the full query string\n        query = \"\";\n        for (let key in parsedParams) {\n            if (!parsedParams.hasOwnProperty(key)) {\n                continue;\n            }\n\n            if (query != \"\") {\n                query += \"&\";\n            }\n\n            query +=\n                encodeURIComponent(key.replace(/%20/g, \"+\")) +\n                \"=\" +\n                encodeURIComponent(parsedParams[key].replace(/%20/g, \"+\"));\n        }\n\n        return query != \"\" ? urlPath + \"?\" + query : urlPath;\n    }\n}\n\nfunction openBrowserPopup(url?: string): Window | null {\n    if (typeof window === \"undefined\" || !window?.open) {\n        throw new ClientResponseError(\n            new Error(\n                `Not in a browser context - please pass a custom urlCallback function.`,\n            ),\n        );\n    }\n\n    let width = 1024;\n    let height = 768;\n\n    let windowWidth = window.innerWidth;\n    let windowHeight = window.innerHeight;\n\n    // normalize window size\n    width = width > windowWidth ? windowWidth : width;\n    height = height > windowHeight ? windowHeight : height;\n\n    let left = windowWidth / 2 - width / 2;\n    let top = windowHeight / 2 - height / 2;\n\n    // note: we don't use the noopener and noreferrer attributes since\n    // for some reason browser blocks such windows then url is undefined/blank\n    return window.open(\n        url,\n        \"popup_window\",\n        \"width=\" +\n            width +\n            \",height=\" +\n            height +\n            \",top=\" +\n            top +\n            \",left=\" +\n            left +\n            \",resizable,menubar=no\",\n    );\n}\n","import { CrudService } from \"@/services/CrudService\";\nimport { CollectionModel } from \"@/tools/dtos\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport class CollectionService extends CrudService<CollectionModel> {\n    /**\n     * @inheritdoc\n     */\n    get baseCrudPath(): string {\n        return \"/api/collections\";\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     *\n     * @throws {ClientResponseError}\n     */\n    async import(\n        collections: Array<CollectionModel>,\n        deleteMissing: boolean = false,\n        options?: CommonOptions,\n    ): Promise<true> {\n        options = Object.assign(\n            {\n                method: \"PUT\",\n                body: {\n                    collections: collections,\n                    deleteMissing: deleteMissing,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/import\", options).then(() => true);\n    }\n\n    /**\n     * Returns type indexed map with scaffolded collection models\n     * populated with their default field values.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getScaffolds(\n        options?: CommonOptions,\n    ): Promise<{ [key: string]: CollectionModel }> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(this.baseCrudPath + \"/meta/scaffolds\", options);\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseService } from \"@/services/BaseService\";\nimport { ListResult, LogModel } from \"@/tools/dtos\";\nimport { CommonOptions, ListOptions, LogStatsOptions } from \"@/tools/options\";\n\nexport interface HourlyStats {\n    total: number;\n    date: string;\n}\n\nexport class LogService extends BaseService {\n    /**\n     * Returns paginated logs list.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getList(\n        page = 1,\n        perPage = 30,\n        options?: ListOptions,\n    ): Promise<ListResult<LogModel>> {\n        options = Object.assign({ method: \"GET\" }, options);\n\n        options.query = Object.assign(\n            {\n                page: page,\n                perPage: perPage,\n            },\n            options.query,\n        );\n\n        return this.client.send(\"/api/logs\", options);\n    }\n\n    /**\n     * Returns a single log by its id.\n     *\n     * If `id` is empty it will throw a 404 error.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getOne(id: string, options?: CommonOptions): Promise<LogModel> {\n        if (!id) {\n            throw new ClientResponseError({\n                url: this.client.buildUrl(\"/api/logs/\"),\n                status: 404,\n                response: {\n                    code: 404,\n                    message: \"Missing required log id.\",\n                    data: {},\n                },\n            });\n        }\n\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/\" + encodeURIComponent(id), options);\n    }\n\n    /**\n     * Returns logs statistics.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/logs/stats\", options);\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface HealthCheckResponse {\n    code: number;\n    message: string;\n    data: { [key: string]: any };\n}\n\nexport class HealthService extends BaseService {\n    /**\n     * Checks the health status of the api.\n     *\n     * @throws {ClientResponseError}\n     */\n    async check(options?: CommonOptions): Promise<HealthCheckResponse> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/health\", options);\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions, FileOptions } from \"@/tools/options\";\n\nexport class FileService extends BaseService {\n    /**\n     * Builds and returns an absolute record file url for the provided filename.\n     */\n    getUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        if (\n            !filename ||\n            !record?.id ||\n            !(record?.collectionId || record?.collectionName)\n        ) {\n            return \"\";\n        }\n\n        const parts = [];\n        parts.push(\"api\");\n        parts.push(\"files\");\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName));\n        parts.push(encodeURIComponent(record.id));\n        parts.push(encodeURIComponent(filename));\n\n        let result = this.client.buildUrl(parts.join(\"/\"));\n\n        if (Object.keys(queryParams).length) {\n            // normalize the download query param for consistency with the Dart sdk\n            if (queryParams.download === false) {\n                delete queryParams.download;\n            }\n\n            const params = new URLSearchParams(queryParams);\n\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result;\n    }\n\n    /**\n     * Requests a new private file access token for the current auth model (admin or record).\n     *\n     * @throws {ClientResponseError}\n     */\n    async getToken(options?: CommonOptions): Promise<string> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(\"/api/files/token\", options)\n            .then((data) => data?.token || \"\");\n    }\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { CommonOptions } from \"@/tools/options\";\n\nexport interface BackupFileInfo {\n    key: string;\n    size: number;\n    modified: string;\n}\n\nexport class BackupService extends BaseService {\n    /**\n     * Returns list with all available backup files.\n     *\n     * @throws {ClientResponseError}\n     */\n    async getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\n        options = Object.assign(\n            {\n                method: \"GET\",\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options);\n    }\n\n    /**\n     * Initializes a new backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async create(basename: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: {\n                    name: basename,\n                },\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups\", options).then(() => true);\n    }\n\n    /**\n     * Uploads an existing backup file.\n     *\n     * Example:\n     *\n     * ```js\n     * await pb.backups.upload({\n     *     file: new Blob([...]),\n     * });\n     * ```\n     *\n     * @throws {ClientResponseError}\n     */\n    async upload(\n        bodyParams: { [key: string]: any } | FormData,\n        options?: CommonOptions,\n    ): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: bodyParams,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/backups/upload\", options).then(() => true);\n    }\n\n    /**\n     * Deletes a single backup file.\n     *\n     * @throws {ClientResponseError}\n     */\n    async delete(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"DELETE\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Initializes an app data restore from an existing backup.\n     *\n     * @throws {ClientResponseError}\n     */\n    async restore(key: string, options?: CommonOptions): Promise<boolean> {\n        options = Object.assign(\n            {\n                method: \"POST\",\n            },\n            options,\n        );\n\n        return this.client\n            .send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\n            .then(() => true);\n    }\n\n    /**\n     * Builds a download url for a single existing backup using an\n     * admin file token and the backup file key.\n     *\n     * The file token can be generated via `pb.files.getToken()`.\n     */\n    getDownloadUrl(token: string, key: string): string {\n        return this.client.buildUrl(\n            `/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`,\n        );\n    }\n}\n","/**\n * Checks if the specified value is a file (aka. File, Blob, RN file object).\n */\nexport function isFile(val: any): boolean {\n    return (\n        (typeof Blob !== \"undefined\" && val instanceof Blob) ||\n        (typeof File !== \"undefined\" && val instanceof File) ||\n        // check for React Native file object format\n        // (see https://github.com/pocketbase/pocketbase/discussions/2002#discussioncomment-5254168)\n        (val !== null &&\n            typeof val === \"object\" &&\n            val.uri &&\n            ((typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\n                (typeof global !== \"undefined\" && (global as any).HermesInternal)))\n    );\n}\n\n/**\n * Loosely checks if the specified body is a FormData instance.\n */\nexport function isFormData(body: any): boolean {\n    return (\n        body &&\n        // we are checking the constructor name because FormData\n        // is not available natively in some environments and the\n        // polyfill(s) may not be globally accessible\n        (body.constructor.name === \"FormData\" ||\n            // fallback to global FormData instance check\n            // note: this is needed because the constructor.name could be different in case of\n            //       custom global FormData implementation, eg. React Native on Android/iOS\n            (typeof FormData !== \"undefined\" && body instanceof FormData))\n    );\n}\n\n/**\n * Checks if the submitted body object has at least one Blob/File field value.\n */\nexport function hasFileField(body: { [key: string]: any }): boolean {\n    for (const key in body) {\n        const values = Array.isArray(body[key]) ? body[key] : [body[key]];\n        for (const v of values) {\n            if (isFile(v)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * Converts analyzes the provided body and converts it to FormData\n * in case a plain object with File/Blob values is used.\n */\nexport function convertToFormDataIfNeeded(body: any): any {\n    if (\n        typeof FormData === \"undefined\" ||\n        typeof body === \"undefined\" ||\n        typeof body !== \"object\" ||\n        body === null ||\n        isFormData(body) ||\n        !hasFileField(body)\n    ) {\n        return body;\n    }\n\n    const form = new FormData();\n\n    for (const key in body) {\n        const val = body[key];\n\n        if (typeof val === \"object\" && !hasFileField({ data: val })) {\n            // send json-like values as jsonPayload to avoid the implicit string value normalization\n            let payload: { [key: string]: any } = {};\n            payload[key] = val;\n            form.append(\"@jsonPayload\", JSON.stringify(payload));\n        } else {\n            // in case of mixed string and file/blob\n            const normalizedVal = Array.isArray(val) ? val : [val];\n            for (let v of normalizedVal) {\n                form.append(key, v);\n            }\n        }\n    }\n\n    return form;\n}\n","import { BaseService } from \"@/services/BaseService\";\nimport { isFile } from \"@/tools/formdata\";\nimport {\n    SendOptions,\n    RecordOptions,\n    normalizeUnknownQueryParams,\n    serializeQueryParams,\n} from \"@/tools/options\";\n\nexport interface BatchRequest {\n    method: string;\n    url: string;\n    json?: { [key: string]: any };\n    files?: { [key: string]: Array<any> };\n    headers?: { [key: string]: string };\n}\n\nexport interface BatchRequestResult {\n    status: number;\n    body: any;\n}\n\nexport class BatchService extends BaseService {\n    private requests: Array<BatchRequest> = [];\n    private subs: { [key: string]: SubBatchService } = {};\n\n    /**\n     * Starts constructing a batch request entry for the specified collection.\n     */\n    collection(collectionIdOrName: string): SubBatchService {\n        if (!this.subs[collectionIdOrName]) {\n            this.subs[collectionIdOrName] = new SubBatchService(\n                this.requests,\n                collectionIdOrName,\n            );\n        }\n\n        return this.subs[collectionIdOrName];\n    }\n\n    /**\n     * Sends the batch requests.\n     *\n     * Note: FormData as individual request body is not supported at the moment.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send(options?: SendOptions): Promise<Array<BatchRequestResult>> {\n        const formData = new FormData();\n\n        const jsonData = [];\n\n        for (let i = 0; i < this.requests.length; i++) {\n            const req = this.requests[i];\n\n            jsonData.push({\n                method: req.method,\n                url: req.url,\n                headers: req.headers,\n                body: req.json,\n            });\n\n            if (req.files) {\n                for (let key in req.files) {\n                    const files = req.files[key] || [];\n                    for (let file of files) {\n                        formData.append(\"requests.\" + i + \".\" + key, file);\n                    }\n                }\n            }\n        }\n\n        formData.append(\"@jsonPayload\", JSON.stringify({ requests: jsonData }));\n\n        options = Object.assign(\n            {\n                method: \"POST\",\n                body: formData,\n            },\n            options,\n        );\n\n        return this.client.send(\"/api/batch\", options);\n    }\n}\n\nexport class SubBatchService {\n    private requests: Array<BatchRequest> = [];\n    private readonly collectionIdOrName: string;\n\n    constructor(requests: Array<BatchRequest>, collectionIdOrName: string) {\n        this.requests = requests;\n        this.collectionIdOrName = collectionIdOrName;\n    }\n\n    /**\n     * Registers a record upsert request into the current batch queue.\n     *\n     * The request will be executed as update if `bodyParams` have a valid existing record `id` value, otherwise - create.\n     */\n    upsert(bodyParams?: { [key: string]: any }, options?: RecordOptions): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"PUT\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records\",\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record create request into the current batch queue.\n     */\n    create(bodyParams?: { [key: string]: any }, options?: RecordOptions): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"POST\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records\",\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record update request into the current batch queue.\n     */\n    update(\n        id: string,\n        bodyParams?: { [key: string]: any },\n        options?: RecordOptions,\n    ): void {\n        options = Object.assign(\n            {\n                body: bodyParams || {},\n            },\n            options,\n        );\n\n        const request: BatchRequest = {\n            method: \"PATCH\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records/\" +\n                encodeURIComponent(id),\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    /**\n     * Registers a record delete request into the current batch queue.\n     */\n    delete(id: string, options?: SendOptions): void {\n        options = Object.assign({}, options);\n\n        const request: BatchRequest = {\n            method: \"DELETE\",\n            url:\n                \"/api/collections/\" +\n                encodeURIComponent(this.collectionIdOrName) +\n                \"/records/\" +\n                encodeURIComponent(id),\n        };\n\n        this.prepareRequest(request, options);\n\n        this.requests.push(request);\n    }\n\n    private prepareRequest(request: BatchRequest, options: SendOptions) {\n        normalizeUnknownQueryParams(options);\n\n        request.headers = options.headers;\n        request.json = {};\n        request.files = {};\n\n        // serialize query parameters\n        // -----------------------------------------------------------\n        if (typeof options.query !== \"undefined\") {\n            const query = serializeQueryParams(options.query);\n            if (query) {\n                request.url += (request.url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n        }\n\n        // extract json and files body data\n        // -----------------------------------------------------------\n        for (const key in options.body) {\n            const val = options.body[key];\n\n            if (isFile(val)) {\n                request.files[key] = request.files[key] || [];\n                request.files[key].push(val);\n            } else if (Array.isArray(val)) {\n                const foundFiles = [];\n                const foundRegular = [];\n                for (const v of val) {\n                    if (isFile(v)) {\n                        foundFiles.push(v);\n                    } else {\n                        foundRegular.push(v);\n                    }\n                }\n\n                if (foundFiles.length > 0 && foundFiles.length == val.length) {\n                    // only files\n                    // ---\n                    request.files[key] = request.files[key] || [];\n                    for (let file of foundFiles) {\n                        request.files[key].push(file);\n                    }\n                } else {\n                    // empty or mixed array (both regular and File/Blob values)\n                    // ---\n                    request.json[key] = foundRegular;\n\n                    if (foundFiles.length > 0) {\n                        // add \"+\" to append if not already since otherwise\n                        // the existing regular files will be deleted\n                        // (the mixed values order is preserved only within their corresponding groups)\n                        let fileKey = key;\n                        if (!key.startsWith(\"+\") && !key.endsWith(\"+\")) {\n                            fileKey += \"+\";\n                        }\n\n                        request.files[fileKey] = request.files[fileKey] || [];\n                        for (let file of foundFiles) {\n                            request.files[fileKey].push(file);\n                        }\n                    }\n                }\n            } else {\n                request.json[key] = val;\n            }\n        }\n    }\n}\n","import { ClientResponseError } from \"@/ClientResponseError\";\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\nimport { LocalAuthStore } from \"@/stores/LocalAuthStore\";\nimport { SettingsService } from \"@/services/SettingsService\";\nimport { RecordService } from \"@/services/RecordService\";\nimport { CollectionService } from \"@/services/CollectionService\";\nimport { LogService } from \"@/services/LogService\";\nimport { RealtimeService } from \"@/services/RealtimeService\";\nimport { HealthService } from \"@/services/HealthService\";\nimport { FileService } from \"@/services/FileService\";\nimport { BackupService } from \"@/services/BackupService\";\nimport { BatchService } from \"@/services/BatchService\";\nimport { RecordModel } from \"@/tools/dtos\";\nimport {\n    SendOptions,\n    FileOptions,\n    normalizeUnknownQueryParams,\n    serializeQueryParams,\n} from \"@/tools/options\";\nimport { isFormData, convertToFormDataIfNeeded } from \"@/tools/formdata\";\n\nexport interface BeforeSendResult {\n    [key: string]: any; // for backward compatibility\n    url?: string;\n    options?: { [key: string]: any };\n}\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect and modify the url and request options.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, options) {\n     *     options.headers = Object.assign({}, options.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return { url, options }\n     * };\n     * ```\n     */\n    beforeSend?: (\n        url: string,\n        options: SendOptions,\n    ) => BeforeSendResult | Promise<BeforeSendResult>;\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data, options) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             response: { ... },\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: ((response: Response, data: any) => any) & ((response: Response, data: any, options: SendOptions) => any);\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: SettingsService;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: CollectionService;\n\n    /**\n     * An instance of the service that handles the **File APIs**.\n     */\n    readonly files: FileService;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: LogService;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: RealtimeService;\n\n    /**\n     * An instance of the service that handles the **Health APIs**.\n     */\n    readonly health: HealthService;\n\n    /**\n     * An instance of the service that handles the **Backup APIs**.\n     */\n    readonly backups: BackupService;\n\n    private cancelControllers: { [key: string]: AbortController } = {};\n    private recordServices: { [key: string]: RecordService } = {};\n    private enableAutoCancellation: boolean = true;\n\n    constructor(baseUrl = \"/\", authStore?: BaseAuthStore | null, lang = \"en-US\") {\n        this.baseUrl = baseUrl;\n        this.lang = lang;\n\n        if (authStore) {\n            this.authStore = authStore;\n        } else if (typeof window != \"undefined\" && !!(window as any).Deno) {\n            // note: to avoid common security issues we fallback to runtime/memory store in case the code is running in Deno env\n            this.authStore = new BaseAuthStore();\n        } else {\n            this.authStore = new LocalAuthStore();\n        }\n\n        // common services\n        this.collections = new CollectionService(this);\n        this.files = new FileService(this);\n        this.logs = new LogService(this);\n        this.settings = new SettingsService(this);\n        this.realtime = new RealtimeService(this);\n        this.health = new HealthService(this);\n        this.backups = new BackupService(this);\n    }\n\n    /**\n     * @deprecated\n     * With PocketBase v0.23.0 admins are converted to a regular auth\n     * collection named \"_superusers\", aka. you can use directly collection(\"_superusers\").\n     */\n    get admins(): RecordService {\n        return this.collection(\"_superusers\");\n    }\n\n    /**\n     * Creates a new batch handler for sending multiple transactional\n     * create/update/upsert/delete collection requests in one network call.\n     *\n     * Example:\n     * ```js\n     * const batch = pb.createBatch();\n     *\n     * batch.collection(\"example1\").create({ ... })\n     * batch.collection(\"example2\").update(\"RECORD_ID\", { ... })\n     * batch.collection(\"example3\").delete(\"RECORD_ID\")\n     * batch.collection(\"example4\").upsert({ ... })\n     *\n     * await batch.send()\n     * ```\n     */\n    createBatch(): BatchService {\n        return new BatchService(this);\n    }\n\n    /**\n     * Returns the RecordService associated to the specified collection.\n     */\n    collection<M = RecordModel>(idOrName: string): RecordService<M> {\n        if (!this.recordServices[idOrName]) {\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\n        }\n\n        return this.recordServices[idOrName];\n    }\n\n    /**\n     * Globally enable or disable auto cancellation for pending duplicated requests.\n     */\n    autoCancellation(enable: boolean): Client {\n        this.enableAutoCancellation = !!enable;\n\n        return this;\n    }\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(requestKey: string): Client {\n        if (this.cancelControllers[requestKey]) {\n            this.cancelControllers[requestKey].abort();\n            delete this.cancelControllers[requestKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Constructs a filter expression with placeholders populated from a parameters object.\n     *\n     * Placeholder parameters are defined with the `{:paramName}` notation.\n     *\n     * The following parameter values are supported:\n     *\n     * - `string` (_single quotes are autoescaped_)\n     * - `number`\n     * - `boolean`\n     * - `Date` object (_stringified into the PocketBase datetime format_)\n     * - `null`\n     * - everything else is converted to a string using `JSON.stringify()`\n     *\n     * Example:\n     *\n     * ```js\n     * pb.collection(\"example\").getFirstListItem(pb.filter(\n     *    'title ~ {:title} && created >= {:created}',\n     *    { title: \"example\", created: new Date()}\n     * ))\n     * ```\n     */\n    filter(raw: string, params?: { [key: string]: any }): string {\n        if (!params) {\n            return raw;\n        }\n\n        for (let key in params) {\n            let val = params[key];\n            switch (typeof val) {\n                case \"boolean\":\n                case \"number\":\n                    val = \"\" + val;\n                    break;\n                case \"string\":\n                    val = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\n                    break;\n                default:\n                    if (val === null) {\n                        val = \"null\";\n                    } else if (val instanceof Date) {\n                        val = \"'\" + val.toISOString().replace(\"T\", \" \") + \"'\";\n                    } else {\n                        val = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\n                    }\n            }\n            raw = raw.replaceAll(\"{:\" + key + \"}\", val);\n        }\n\n        return raw;\n    }\n\n    /**\n     * Legacy alias of `pb.files.getUrl()`.\n     */\n    getFileUrl(\n        record: { [key: string]: any },\n        filename: string,\n        queryParams: FileOptions = {},\n    ): string {\n        return this.files.getUrl(record, filename, queryParams);\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl;\n\n        // construct an absolute base url if in a browser environment\n        if (\n            typeof window !== \"undefined\" &&\n            !!window.location &&\n            !url.startsWith(\"https://\") &&\n            !url.startsWith(\"http://\")\n        ) {\n            url = window.location.origin?.endsWith(\"/\")\n                ? window.location.origin.substring(0, window.location.origin.length - 1)\n                : window.location.origin || \"\";\n\n            if (!this.baseUrl.startsWith(\"/\")) {\n                url += window.location.pathname || \"/\";\n                url += url.endsWith(\"/\") ? \"\" : \"/\";\n            }\n\n            url += this.baseUrl;\n        }\n\n        // concatenate the path\n        if (path) {\n            url += url.endsWith(\"/\") ? \"\" : \"/\"; // append trailing slash if missing\n            url += path.startsWith(\"/\") ? path.substring(1) : path;\n        }\n\n        return url;\n    }\n\n    /**\n     * Sends an api http request.\n     *\n     * @throws {ClientResponseError}\n     */\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\n        options = this.initSendOptions(path, options);\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        if (this.beforeSend) {\n            const result = Object.assign({}, await this.beforeSend(url, options));\n            if (\n                typeof result.url !== \"undefined\" ||\n                typeof result.options !== \"undefined\"\n            ) {\n                url = result.url || url;\n                options = result.options || options;\n            } else if (Object.keys(result).length) {\n                // legacy behavior\n                options = result as SendOptions;\n                console?.warn &&\n                    console.warn(\n                        \"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\",\n                    );\n            }\n        }\n\n        // serialize the query parameters\n        if (typeof options.query !== \"undefined\") {\n            const query = serializeQueryParams(options.query);\n            if (query) {\n                url += (url.includes(\"?\") ? \"&\" : \"?\") + query;\n            }\n            delete options.query;\n        }\n\n        // ensures that the json body is serialized\n        if (\n            this.getHeader(options.headers, \"Content-Type\") == \"application/json\" &&\n            options.body &&\n            typeof options.body !== \"string\"\n        ) {\n            options.body = JSON.stringify(options.body);\n        }\n\n        const fetchFunc = options.fetch || fetch;\n\n        // send the request\n        return fetchFunc(url, options)\n            .then(async (response) => {\n                let data: any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = await this.afterSend(response, data, options);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url: response.url,\n                        status: response.status,\n                        data: data,\n                    });\n                }\n\n                return data as T;\n            })\n            .catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Shallow copy the provided object and takes care to initialize\n     * any options required to preserve the backward compatability.\n     *\n     * @param  {SendOptions} options\n     * @return {SendOptions}\n     */\n    private initSendOptions(path: string, options: SendOptions): SendOptions {\n        options = Object.assign({ method: \"GET\" } as SendOptions, options);\n\n        // auto convert the body to FormData, if needed\n        options.body = convertToFormDataIfNeeded(options.body);\n\n        // move unknown send options as query parameters\n        normalizeUnknownQueryParams(options);\n\n        // requestKey normalizations for backward-compatibility\n        // ---\n        options.query = Object.assign({}, options.params, options.query);\n        if (typeof options.requestKey === \"undefined\") {\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\n                options.requestKey = null;\n            } else if (options.$cancelKey || options.query.$cancelKey) {\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\n            }\n        }\n        // remove the deprecated special cancellation params from the other query params\n        delete options.$autoCancel;\n        delete options.query.$autoCancel;\n        delete options.$cancelKey;\n        delete options.query.$cancelKey;\n        // ---\n\n        // add the json header, if not explicitly set\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\n        if (\n            this.getHeader(options.headers, \"Content-Type\") === null &&\n            !isFormData(options.body)\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Content-Type\": \"application/json\",\n            });\n        }\n\n        // add Accept-Language header, if not explicitly set\n        if (this.getHeader(options.headers, \"Accept-Language\") === null) {\n            options.headers = Object.assign({}, options.headers, {\n                \"Accept-Language\": this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has valid token\n            this.authStore.token &&\n            // auth header is not explicitly set\n            this.getHeader(options.headers, \"Authorization\") === null\n        ) {\n            options.headers = Object.assign({}, options.headers, {\n                Authorization: this.authStore.token,\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (this.enableAutoCancellation && options.requestKey !== null) {\n            const requestKey = options.requestKey || (options.method || \"GET\") + path;\n\n            delete options.requestKey;\n\n            // cancel previous pending requests\n            this.cancelRequest(requestKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[requestKey] = controller;\n            options.signal = controller.signal;\n        }\n\n        return options;\n    }\n\n    /**\n     * Extracts the header with the provided name in case-insensitive manner.\n     * Returns `null` if no header matching the name is found.\n     */\n    private getHeader(\n        headers: { [key: string]: string } | undefined,\n        name: string,\n    ): string | null {\n        headers = headers || {};\n        name = name.toLowerCase();\n\n        for (let key in headers) {\n            if (key.toLowerCase() == name) {\n                return headers[key];\n            }\n        }\n\n        return null;\n    }\n}\n"],"names":["ClientResponseError","Error","constructor","errData","super","this","url","status","response","isAbort","originalError","Object","setPrototypeOf","prototype","data","DOMException","name","message","cause","includes","toJSON","fieldContentRegExp","cookieSerialize","val","options","opt","assign","encode","defaultEncode","test","TypeError","value","result","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","toString","call","Date","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","defaultDecode","indexOf","decodeURIComponent","encodeURIComponent","isReactNative","navigator","product","global","HermesInternal","atobPolyfill","getTokenPayload","token","encodedPayload","split","map","c","charCodeAt","slice","join","JSON","parse","e","isTokenExpired","expirationThreshold","payload","keys","length","exp","now","atob","input","str","String","replace","bs","buffer","bc","idx","output","charAt","fromCharCode","defaultCookieKey","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","record","model","isValid","isAdmin","type","isAuthRecord","save","triggerChange","clear","loadFromCookie","cookie","key","rawData","cookieParse","decode","index","eqIdx","endIdx","lastIndexOf","trim","undefined","_","Array","isArray","exportToCookie","defaultOptions","stringify","resultLength","Blob","size","id","email","extraProps","prop","onChange","callback","fireImmediately","push","i","splice","LocalAuthStore","storageKey","storageFallback","_bindStorageEvent","_storageGet","_storageSet","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","addEventListener","BaseService","client","SettingsService","getAll","method","send","update","bodyParams","body","testS3","filesystem","then","testEmail","collectionIdOrName","toEmail","emailTemplate","template","collection","generateAppleClientSecret","clientId","teamId","keyId","privateKey","duration","knownSendOptionsKeys","normalizeUnknownQueryParams","query","serializeQueryParams","params","encodedKey","v","toISOString","RealtimeService","eventSource","subscriptions","lastSentSubscriptions","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","isConnected","subscribe","topic","serialized","headers","listener","msgEvent","submitSubscriptions","connect","async","unsubscribeByTopicAndListener","unsubscribe","needToSubmit","subs","getSubscriptionsByTopic","hasSubscriptionListeners","removeEventListener","disconnect","unsubscribeByPrefix","keyPrefix","hasAtleastOneTopic","startsWith","exist","keyToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionKeys","requestKey","getSubscriptionsCancelKey","catch","err","removeAllSubscriptionListeners","Promise","resolve","reject","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","buildUrl","onerror","lastEventId","retries","hasUnsentSubscriptions","p","reconnectTimeoutId","connectSubs","latestTopics","t","timeout","fromReconnect","cancelRequest","close","CrudService","getFullList","batchOrqueryParams","_getFullList","batch","getList","page","perPage","baseCrudPath","responseData","items","item","getFirstListItem","filter","skipTotal","code","getOne","create","batchSize","request","list","concat","normalizeLegacyOptionsArgs","legacyWarn","baseOptions","bodyOrOptions","hasQuery","console","warn","resetAutoRefresh","_resetAutoRefresh","RecordService","baseCollectionPath","isSuperusers","realtime","batchOrOptions","authStore","collectionId","collectionName","delete","success","authResponse","listAuthMethods","fields","authWithPassword","usernameOrEmail","password","autoRefreshThreshold","identity","autoRefresh","authData","registerAutoRefresh","threshold","refreshFunc","reauthenticateFunc","oldBeforeSend","beforeSend","oldModel","unsubStoreChange","newToken","sendOptions","oldToken","authRefresh","authWithOAuth2Code","provider","codeVerifier","redirectUrl","createData","redirectURL","authWithOAuth2","args","config","eagerDefaultPopup","urlCallback","openBrowserPopup","cleanup","requestKeyOptions","authMethods","oauth2","providers","find","cancelController","signal","onabort","oldState","state","error","scopes","replacements","_replaceQueryParams","authUrl","location","href","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","requestVerification","confirmVerification","verificationToken","verified","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","recordId","unlinkExternalAuth","ea","requestOTP","authWithOTP","otpId","impersonate","Authorization","Client","baseUrl","lang","urlPath","substring","parsedParams","rawParams","param","pair","hasOwnProperty","open","width","height","windowWidth","innerWidth","windowHeight","innerHeight","left","top","CollectionService","import","collections","deleteMissing","getScaffolds","LogService","getStats","HealthService","check","FileService","getUrl","filename","queryParams","parts","download","URLSearchParams","getToken","BackupService","basename","upload","restore","getDownloadUrl","isFile","File","uri","isFormData","FormData","hasFileField","values","BatchService","requests","SubBatchService","formData","jsonData","req","json","files","file","append","upsert","prepareRequest","foundFiles","foundRegular","fileKey","endsWith","cancelControllers","recordServices","enableAutoCancellation","Deno","logs","settings","health","backups","admins","createBatch","idOrName","autoCancellation","enable","abort","cancelAllRequests","k","raw","replaceAll","getFileUrl","origin","pathname","initSendOptions","getHeader","fetch","afterSend","convertToFormDataIfNeeded","form","$autoCancel","$cancelKey","controller","AbortController"],"mappings":"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"}