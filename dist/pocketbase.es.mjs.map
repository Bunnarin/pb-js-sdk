{"version":3,"file":"pocketbase.es.mjs","sources":["../src/ClientResponseError.ts","../src/tools/cookie.ts","../src/tools/jwt.ts","../src/stores/BaseAuthStore.ts","../src/stores/LocalAuthStore.ts","../src/services/BaseService.ts","../src/services/SettingsService.ts","../src/tools/options.ts","../src/services/RealtimeService.ts","../src/services/CrudService.ts","../src/tools/legacy.ts","../src/tools/refresh.ts","../src/services/RecordService.ts","../src/services/CollectionService.ts","../src/services/LogService.ts","../src/services/HealthService.ts","../src/services/FileService.ts","../src/services/BackupService.ts","../src/services/CronService.ts","../src/tools/formdata.ts","../src/services/BatchService.ts","../src/Client.ts","../src/stores/AsyncAuthStore.ts"],"sourcesContent":["/**\r\n * ClientResponseError is a custom Error class that is intended to wrap\r\n * and normalize any error thrown by `Client.send()`.\r\n */\r\nexport class ClientResponseError extends Error {\r\n    url: string = \"\";\r\n    status: number = 0;\r\n    response: { [key: string]: any } = {};\r\n    isAbort: boolean = false;\r\n    originalError: any = null;\r\n\r\n    constructor(errData?: any) {\r\n        super(\"ClientResponseError\");\r\n\r\n        // Set the prototype explicitly.\r\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\r\n\r\n        if (errData !== null && typeof errData === \"object\") {\r\n            this.url = typeof errData.url === \"string\" ? errData.url : \"\";\r\n            this.status = typeof errData.status === \"number\" ? errData.status : 0;\r\n            this.isAbort = !!errData.isAbort;\r\n            this.originalError = errData.originalError;\r\n\r\n            if (errData.response !== null && typeof errData.response === \"object\") {\r\n                this.response = errData.response;\r\n            } else if (errData.data !== null && typeof errData.data === \"object\") {\r\n                this.response = errData.data;\r\n            } else {\r\n                this.response = {};\r\n            }\r\n        }\r\n\r\n        if (!this.originalError && !(errData instanceof ClientResponseError)) {\r\n            this.originalError = errData;\r\n        }\r\n\r\n        if (typeof DOMException !== \"undefined\" && errData instanceof DOMException) {\r\n            this.isAbort = true;\r\n        }\r\n\r\n        this.name = \"ClientResponseError \" + this.status;\r\n        this.message = this.response?.message;\r\n        if (!this.message) {\r\n            if (this.isAbort) {\r\n                this.message =\r\n                    \"The request was autocancelled. You can find more info in https://github.com/pocketbase/js-sdk#auto-cancellation.\";\r\n            } else if (this.originalError?.cause?.message?.includes(\"ECONNREFUSED ::1\")) {\r\n                this.message =\r\n                    \"Failed to connect to the PocketBase server. Try changing the SDK URL from localhost to 127.0.0.1 (https://github.com/pocketbase/js-sdk/issues/21).\";\r\n            } else {\r\n                this.message = \"Something went wrong.\";\r\n            }\r\n        }\r\n\r\n        // set this.cause so that JS debugging tools can automatically connect\r\n        // the dots between the original error and the wrapped one\r\n        this.cause = this.originalError;\r\n    }\r\n\r\n    /**\r\n     * Alias for `this.response` for backward compatibility.\r\n     */\r\n    get data() {\r\n        return this.response;\r\n    }\r\n\r\n    /**\r\n     * Make a POJO's copy of the current error class instance.\r\n     * @see https://github.com/vuex-orm/vuex-orm/issues/255\r\n     */\r\n    toJSON() {\r\n        return { ...this };\r\n    }\r\n}\r\n","/**\r\n * -------------------------------------------------------------------\r\n * Simple cookie parse and serialize utilities mostly based on the\r\n * node module https://github.com/jshttp/cookie.\r\n * -------------------------------------------------------------------\r\n */\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\nexport interface ParseOptions {\r\n    decode?: (val: string) => string;\r\n}\r\n\r\n/**\r\n * Parses the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n */\r\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any } {\r\n    const result: { [key: string]: any } = {};\r\n\r\n    if (typeof str !== \"string\") {\r\n        return result;\r\n    }\r\n\r\n    const opt = Object.assign({}, options || {});\r\n    const decode = opt.decode || defaultDecode;\r\n\r\n    let index = 0;\r\n    while (index < str.length) {\r\n        const eqIdx = str.indexOf(\"=\", index);\r\n\r\n        // no more cookie pairs\r\n        if (eqIdx === -1) {\r\n            break;\r\n        }\r\n\r\n        let endIdx = str.indexOf(\";\", index);\r\n\r\n        if (endIdx === -1) {\r\n            endIdx = str.length;\r\n        } else if (endIdx < eqIdx) {\r\n            // backtrack on prior semicolon\r\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\r\n            continue;\r\n        }\r\n\r\n        const key = str.slice(index, eqIdx).trim();\r\n\r\n        // only assign once\r\n        if (undefined === result[key]) {\r\n            let val = str.slice(eqIdx + 1, endIdx).trim();\r\n\r\n            // quoted values\r\n            if (val.charCodeAt(0) === 0x22) {\r\n                val = val.slice(1, -1);\r\n            }\r\n\r\n            try {\r\n                result[key] = decode(val);\r\n            } catch (_) {\r\n                result[key] = val; // no decoding\r\n            }\r\n        }\r\n\r\n        index = endIdx + 1;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport interface SerializeOptions {\r\n    encode?: (val: string | number | boolean) => string;\r\n    maxAge?: number;\r\n    domain?: string;\r\n    path?: string;\r\n    expires?: Date;\r\n    httpOnly?: boolean;\r\n    secure?: boolean;\r\n    priority?: string;\r\n    sameSite?: boolean | string;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * ```js\r\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\r\n * ```\r\n */\r\nexport function cookieSerialize(\r\n    name: string,\r\n    val: string,\r\n    options?: SerializeOptions,\r\n): string {\r\n    const opt = Object.assign({}, options || {});\r\n    const encode = opt.encode || defaultEncode;\r\n\r\n    if (!fieldContentRegExp.test(name)) {\r\n        throw new TypeError(\"argument name is invalid\");\r\n    }\r\n\r\n    const value = encode(val);\r\n\r\n    if (value && !fieldContentRegExp.test(value)) {\r\n        throw new TypeError(\"argument val is invalid\");\r\n    }\r\n\r\n    let result = name + \"=\" + value;\r\n\r\n    if (opt.maxAge != null) {\r\n        const maxAge = opt.maxAge - 0;\r\n\r\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\r\n            throw new TypeError(\"option maxAge is invalid\");\r\n        }\r\n\r\n        result += \"; Max-Age=\" + Math.floor(maxAge);\r\n    }\r\n\r\n    if (opt.domain) {\r\n        if (!fieldContentRegExp.test(opt.domain)) {\r\n            throw new TypeError(\"option domain is invalid\");\r\n        }\r\n\r\n        result += \"; Domain=\" + opt.domain;\r\n    }\r\n\r\n    if (opt.path) {\r\n        if (!fieldContentRegExp.test(opt.path)) {\r\n            throw new TypeError(\"option path is invalid\");\r\n        }\r\n\r\n        result += \"; Path=\" + opt.path;\r\n    }\r\n\r\n    if (opt.expires) {\r\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\r\n            throw new TypeError(\"option expires is invalid\");\r\n        }\r\n\r\n        result += \"; Expires=\" + opt.expires.toUTCString();\r\n    }\r\n\r\n    if (opt.httpOnly) {\r\n        result += \"; HttpOnly\";\r\n    }\r\n\r\n    if (opt.secure) {\r\n        result += \"; Secure\";\r\n    }\r\n\r\n    if (opt.priority) {\r\n        const priority =\r\n            typeof opt.priority === \"string\" ? opt.priority.toLowerCase() : opt.priority;\r\n\r\n        switch (priority) {\r\n            case \"low\":\r\n                result += \"; Priority=Low\";\r\n                break;\r\n            case \"medium\":\r\n                result += \"; Priority=Medium\";\r\n                break;\r\n            case \"high\":\r\n                result += \"; Priority=High\";\r\n                break;\r\n            default:\r\n                throw new TypeError(\"option priority is invalid\");\r\n        }\r\n    }\r\n\r\n    if (opt.sameSite) {\r\n        const sameSite =\r\n            typeof opt.sameSite === \"string\" ? opt.sameSite.toLowerCase() : opt.sameSite;\r\n\r\n        switch (sameSite) {\r\n            case true:\r\n                result += \"; SameSite=Strict\";\r\n                break;\r\n            case \"lax\":\r\n                result += \"; SameSite=Lax\";\r\n                break;\r\n            case \"strict\":\r\n                result += \"; SameSite=Strict\";\r\n                break;\r\n            case \"none\":\r\n                result += \"; SameSite=None\";\r\n                break;\r\n            default:\r\n                throw new TypeError(\"option sameSite is invalid\");\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Default URL-decode string value function.\r\n * Optimized to skip native call when no `%`.\r\n */\r\nfunction defaultDecode(val: string): string {\r\n    return val.indexOf(\"%\") !== -1 ? decodeURIComponent(val) : val;\r\n}\r\n\r\n/**\r\n * Default URL-encode value function.\r\n */\r\nfunction defaultEncode(val: string | number | boolean): string {\r\n    return encodeURIComponent(val);\r\n}\r\n\r\n/**\r\n * Determines if value is a Date.\r\n */\r\nfunction isDate(val: any): boolean {\r\n    return Object.prototype.toString.call(val) === \"[object Date]\" || val instanceof Date;\r\n}\r\n","// @todo remove after https://github.com/reactwg/react-native-releases/issues/287\r\nconst isReactNative =\r\n    (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\r\n    (typeof global !== \"undefined\" && (global as any).HermesInternal);\r\n\r\nlet atobPolyfill: Function;\r\nif (typeof atob === \"function\" && !isReactNative) {\r\n    atobPolyfill = atob;\r\n} else {\r\n    /**\r\n     * The code was extracted from:\r\n     * https://github.com/davidchambers/Base64.js\r\n     */\r\n    atobPolyfill = (input: any) => {\r\n        const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n\r\n        let str = String(input).replace(/=+$/, \"\");\r\n        if (str.length % 4 == 1) {\r\n            throw new Error(\r\n                \"'atob' failed: The string to be decoded is not correctly encoded.\",\r\n            );\r\n        }\r\n\r\n        for (\r\n            // initialize result and counters\r\n            var bc = 0, bs, buffer, idx = 0, output = \"\";\r\n            // get next character\r\n            (buffer = str.charAt(idx++));\r\n            // character found in table? initialize bit storage and add its ascii value;\r\n            ~buffer &&\r\n            ((bs = bc % 4 ? (bs as any) * 64 + buffer : buffer),\r\n            // and if not first of each 4 characters,\r\n            // convert the first 8 bits to one ascii character\r\n            bc++ % 4)\r\n                ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\r\n                : 0\r\n        ) {\r\n            // try to find character in table (0-63, not found => -1)\r\n            buffer = chars.indexOf(buffer);\r\n        }\r\n\r\n        return output;\r\n    };\r\n}\r\n\r\n/**\r\n * Returns JWT token's payload data.\r\n */\r\nexport function getTokenPayload(token: string): { [key: string]: any } {\r\n    if (token) {\r\n        try {\r\n            const encodedPayload = decodeURIComponent(\r\n                atobPolyfill(token.split(\".\")[1])\r\n                    .split(\"\")\r\n                    .map(function (c: string) {\r\n                        return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\r\n                    })\r\n                    .join(\"\"),\r\n            );\r\n\r\n            return JSON.parse(encodedPayload) || {};\r\n        } catch (e) {}\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\n/**\r\n * Checks whether a JWT token is expired or not.\r\n * Tokens without `exp` payload key are considered valid.\r\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\r\n *\r\n * @param token The token to check.\r\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\r\n */\r\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\r\n    let payload = getTokenPayload(token);\r\n\r\n    if (\r\n        Object.keys(payload).length > 0 &&\r\n        (!payload.exp || payload.exp - expirationThreshold > Date.now() / 1000)\r\n    ) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n","import { cookieParse, cookieSerialize, SerializeOptions } from \"@/tools/cookie\";\r\nimport { isTokenExpired, getTokenPayload } from \"@/tools/jwt\";\r\nimport { RecordModel } from \"@/tools/dtos\";\r\n\r\nexport type AuthRecord = RecordModel | null;\r\n\r\nexport type AuthModel = AuthRecord; // for backward compatibility\r\n\r\nexport type OnStoreChangeFunc = (token: string, record: AuthRecord) => void;\r\n\r\nconst defaultCookieKey = \"pb_auth\";\r\n\r\n/**\r\n * Base AuthStore class that stores the auth state in runtime memory (aka. only for the duration of the store instane).\r\n *\r\n * Usually you wouldn't use it directly and instead use the builtin LocalAuthStore, AsyncAuthStore\r\n * or extend it with your own custom implementation.\r\n */\r\nexport class BaseAuthStore {\r\n    protected baseToken: string = \"\";\r\n    protected baseModel: AuthRecord = null;\r\n\r\n    private _onChangeCallbacks: Array<OnStoreChangeFunc> = [];\r\n\r\n    /**\r\n     * Retrieves the stored token (if any).\r\n     */\r\n    get token(): string {\r\n        return this.baseToken;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the stored model data (if any).\r\n     */\r\n    get record(): AuthRecord {\r\n        return this.baseModel;\r\n    }\r\n\r\n    /**\r\n     * @deprecated use `record` instead.\r\n     */\r\n    get model(): AuthRecord {\r\n        return this.baseModel;\r\n    }\r\n\r\n    /**\r\n     * Loosely checks if the store has valid token (aka. existing and unexpired exp claim).\r\n     */\r\n    get isValid(): boolean {\r\n        return !isTokenExpired(this.token);\r\n    }\r\n\r\n    /**\r\n     * Loosely checks whether the currently loaded store state is for superuser.\r\n     *\r\n     * Alternatively you can also compare directly `pb.authStore.record?.collectionName`.\r\n     */\r\n    get isSuperuser(): boolean {\r\n        let payload = getTokenPayload(this.token);\r\n\r\n        return (\r\n            payload.type == \"auth\" &&\r\n            (this.record?.collectionName == \"_superusers\" ||\r\n                // fallback in case the record field is not populated and assuming\r\n                // that the collection crc32 checksum id wasn't manually changed\r\n                (!this.record?.collectionName &&\r\n                    payload.collectionId == \"pbc_3142635823\"))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @deprecated use `isSuperuser` instead or simply check the record.collectionName property.\r\n     */\r\n    get isAdmin(): boolean {\r\n        console.warn(\r\n            \"Please replace pb.authStore.isAdmin with pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName\",\r\n        );\r\n        return this.isSuperuser;\r\n    }\r\n\r\n    /**\r\n     * @deprecated use `!isSuperuser` instead or simply check the record.collectionName property.\r\n     */\r\n    get isAuthRecord(): boolean {\r\n        console.warn(\r\n            \"Please replace pb.authStore.isAuthRecord with !pb.authStore.isSuperuser OR simply check the value of pb.authStore.record?.collectionName\",\r\n        );\r\n        return getTokenPayload(this.token).type == \"auth\" && !this.isSuperuser;\r\n    }\r\n\r\n    /**\r\n     * Saves the provided new token and model data in the auth store.\r\n     */\r\n    save(token: string, record?: AuthRecord): void {\r\n        this.baseToken = token || \"\";\r\n        this.baseModel = record || null;\r\n\r\n        this.triggerChange();\r\n    }\r\n\r\n    /**\r\n     * Removes the stored token and model data form the auth store.\r\n     */\r\n    clear(): void {\r\n        this.baseToken = \"\";\r\n        this.baseModel = null;\r\n        this.triggerChange();\r\n    }\r\n\r\n    /**\r\n     * Parses the provided cookie string and updates the store state\r\n     * with the cookie's token and model data.\r\n     *\r\n     * NB! This function doesn't validate the token or its data.\r\n     * Usually this isn't a concern if you are interacting only with the\r\n     * PocketBase API because it has the proper server-side security checks in place,\r\n     * but if you are using the store `isValid` state for permission controls\r\n     * in a node server (eg. SSR), then it is recommended to call `authRefresh()`\r\n     * after loading the cookie to ensure an up-to-date token and model state.\r\n     * For example:\r\n     *\r\n     * ```js\r\n     * pb.authStore.loadFromCookie(\"cookie string...\");\r\n     *\r\n     * try {\r\n     *     // get an up-to-date auth store state by veryfing and refreshing the loaded auth model (if any)\r\n     *     pb.authStore.isValid && await pb.collection('users').authRefresh();\r\n     * } catch (_) {\r\n     *     // clear the auth store on failed refresh\r\n     *     pb.authStore.clear();\r\n     * }\r\n     * ```\r\n     */\r\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\r\n        const rawData = cookieParse(cookie || \"\")[key] || \"\";\r\n\r\n        let data: { [key: string]: any } = {};\r\n        try {\r\n            data = JSON.parse(rawData);\r\n            // normalize\r\n            if (typeof data === null || typeof data !== \"object\" || Array.isArray(data)) {\r\n                data = {};\r\n            }\r\n        } catch (_) {}\r\n\r\n        this.save(data.token || \"\", data.record || data.model || null);\r\n    }\r\n\r\n    /**\r\n     * Exports the current store state as cookie string.\r\n     *\r\n     * By default the following optional attributes are added:\r\n     * - Secure\r\n     * - HttpOnly\r\n     * - SameSite=Strict\r\n     * - Path=/\r\n     * - Expires={the token expiration date}\r\n     *\r\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\r\n     * strip the model data to the bare minimum to try to fit within the\r\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\r\n     */\r\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\r\n        const defaultOptions: SerializeOptions = {\r\n            secure: true,\r\n            sameSite: true,\r\n            httpOnly: true,\r\n            path: \"/\",\r\n        };\r\n\r\n        // extract the token expiration date\r\n        const payload = getTokenPayload(this.token);\r\n        if (payload?.exp) {\r\n            defaultOptions.expires = new Date(payload.exp * 1000);\r\n        } else {\r\n            defaultOptions.expires = new Date(\"1970-01-01\");\r\n        }\r\n\r\n        // merge with the user defined options\r\n        options = Object.assign({}, defaultOptions, options);\r\n\r\n        const rawData = {\r\n            token: this.token,\r\n            record: this.record ? JSON.parse(JSON.stringify(this.record)) : null,\r\n        };\r\n\r\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\r\n\r\n        const resultLength =\r\n            typeof Blob !== \"undefined\" ? new Blob([result]).size : result.length;\r\n\r\n        // strip down the model data to the bare minimum\r\n        if (rawData.record && resultLength > 4096) {\r\n            rawData.record = { id: rawData.record?.id, email: rawData.record?.email };\r\n            const extraProps = [\"collectionId\", \"collectionName\", \"verified\"];\r\n            for (const prop in this.record) {\r\n                if (extraProps.includes(prop)) {\r\n                    rawData.record[prop] = this.record[prop];\r\n                }\r\n            }\r\n            result = cookieSerialize(key, JSON.stringify(rawData), options);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Register a callback function that will be called on store change.\r\n     *\r\n     * You can set the `fireImmediately` argument to true in order to invoke\r\n     * the provided callback right after registration.\r\n     *\r\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\r\n     */\r\n    onChange(callback: OnStoreChangeFunc, fireImmediately = false): () => void {\r\n        this._onChangeCallbacks.push(callback);\r\n\r\n        if (fireImmediately) {\r\n            callback(this.token, this.record);\r\n        }\r\n\r\n        return () => {\r\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\r\n                if (this._onChangeCallbacks[i] == callback) {\r\n                    delete this._onChangeCallbacks[i]; // removes the function reference\r\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    protected triggerChange(): void {\r\n        for (const callback of this._onChangeCallbacks) {\r\n            callback && callback(this.token, this.record);\r\n        }\r\n    }\r\n}\r\n","import { BaseAuthStore, AuthRecord } from \"@/stores/BaseAuthStore\";\r\n\r\n/**\r\n * The default token store for browsers with auto fallback\r\n * to runtime/memory if local storage is undefined (e.g. in node env).\r\n */\r\nexport class LocalAuthStore extends BaseAuthStore {\r\n    private storageFallback: { [key: string]: any } = {};\r\n    private storageKey: string;\r\n\r\n    constructor(storageKey = \"pocketbase_auth\") {\r\n        super();\r\n\r\n        this.storageKey = storageKey;\r\n\r\n        this._bindStorageEvent();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    get token(): string {\r\n        const data = this._storageGet(this.storageKey) || {};\r\n\r\n        return data.token || \"\";\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    get record(): AuthRecord {\r\n        const data = this._storageGet(this.storageKey) || {};\r\n\r\n        return data.record || data.model || null;\r\n    }\r\n\r\n    /**\r\n     * @deprecated use `record` instead.\r\n     */\r\n    get model(): AuthRecord {\r\n        return this.record;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    save(token: string, record?: AuthRecord) {\r\n        this._storageSet(this.storageKey, {\r\n            token: token,\r\n            record: record,\r\n        });\r\n\r\n        super.save(token, record);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    clear() {\r\n        this._storageRemove(this.storageKey);\r\n\r\n        super.clear();\r\n    }\r\n\r\n    // ---------------------------------------------------------------\r\n    // Internal helpers:\r\n    // ---------------------------------------------------------------\r\n\r\n    /**\r\n     * Retrieves `key` from the browser's local storage\r\n     * (or runtime/memory if local storage is undefined).\r\n     */\r\n    private _storageGet(key: string): any {\r\n        if (typeof window !== \"undefined\" && window?.localStorage) {\r\n            const rawValue = window.localStorage.getItem(key) || \"\";\r\n            try {\r\n                return JSON.parse(rawValue);\r\n            } catch (e) {\r\n                // not a json\r\n                return rawValue;\r\n            }\r\n        }\r\n\r\n        // fallback\r\n        return this.storageFallback[key];\r\n    }\r\n\r\n    /**\r\n     * Stores a new data in the browser's local storage\r\n     * (or runtime/memory if local storage is undefined).\r\n     */\r\n    private _storageSet(key: string, value: any) {\r\n        if (typeof window !== \"undefined\" && window?.localStorage) {\r\n            // store in local storage\r\n            let normalizedVal = value;\r\n            if (typeof value !== \"string\") {\r\n                normalizedVal = JSON.stringify(value);\r\n            }\r\n            window.localStorage.setItem(key, normalizedVal);\r\n        } else {\r\n            // store in fallback\r\n            this.storageFallback[key] = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes `key` from the browser's local storage and the runtime/memory.\r\n     */\r\n    private _storageRemove(key: string) {\r\n        // delete from local storage\r\n        if (typeof window !== \"undefined\" && window?.localStorage) {\r\n            window.localStorage?.removeItem(key);\r\n        }\r\n\r\n        // delete from fallback\r\n        delete this.storageFallback[key];\r\n    }\r\n\r\n    /**\r\n     * Updates the current store state on localStorage change.\r\n     */\r\n    private _bindStorageEvent() {\r\n        if (\r\n            typeof window === \"undefined\" ||\r\n            !window?.localStorage ||\r\n            !window.addEventListener\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"storage\", (e) => {\r\n            if (e.key != this.storageKey) {\r\n                return;\r\n            }\r\n\r\n            const data = this._storageGet(this.storageKey) || {};\r\n\r\n            super.save(data.token || \"\", data.record || data.model || null);\r\n        });\r\n    }\r\n}\r\n","import Client from \"@/Client\";\r\n\r\n/**\r\n * BaseService class that should be inherited from all API services.\r\n */\r\nexport abstract class BaseService {\r\n    readonly client: Client;\r\n\r\n    constructor(client: Client) {\r\n        this.client = client;\r\n    }\r\n}\r\n","import { BaseService } from \"@/services/BaseService\";\r\nimport { CommonOptions } from \"@/tools/options\";\r\n\r\ninterface appleClientSecret {\r\n    secret: string;\r\n}\r\n\r\nexport class SettingsService extends BaseService {\r\n    /**\r\n     * Fetch all available app settings.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getAll(options?: CommonOptions): Promise<{ [key: string]: any }> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/settings\", options);\r\n    }\r\n\r\n    /**\r\n     * Bulk updates app settings.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async update(\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: CommonOptions,\r\n    ): Promise<{ [key: string]: any }> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"PATCH\",\r\n                body: bodyParams,\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/settings\", options);\r\n    }\r\n\r\n    /**\r\n     * Performs a S3 filesystem connection test.\r\n     *\r\n     * The currently supported `filesystem` are \"storage\" and \"backups\".\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async testS3(\r\n        filesystem: string = \"storage\",\r\n        options?: CommonOptions,\r\n    ): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: {\r\n                    filesystem: filesystem,\r\n                },\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/settings/test/s3\", options).then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Sends a test email.\r\n     *\r\n     * The possible `emailTemplate` values are:\r\n     * - verification\r\n     * - password-reset\r\n     * - email-change\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async testEmail(\r\n        collectionIdOrName: string,\r\n        toEmail: string,\r\n        emailTemplate: string,\r\n        options?: CommonOptions,\r\n    ): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: {\r\n                    email: toEmail,\r\n                    template: emailTemplate,\r\n                    collection: collectionIdOrName,\r\n                },\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/settings/test/email\", options).then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Generates a new Apple OAuth2 client secret.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async generateAppleClientSecret(\r\n        clientId: string,\r\n        teamId: string,\r\n        keyId: string,\r\n        privateKey: string,\r\n        duration: number,\r\n        options?: CommonOptions,\r\n    ): Promise<appleClientSecret> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: {\r\n                    clientId,\r\n                    teamId,\r\n                    keyId,\r\n                    privateKey,\r\n                    duration,\r\n                },\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/settings/apple/generate-client-secret\", options);\r\n    }\r\n}\r\n","export interface SendOptions extends RequestInit {\r\n    // for backward compatibility and to minimize the verbosity,\r\n    // any top-level field that doesn't exist in RequestInit or the\r\n    // fields below will be treated as query parameter.\r\n    [key: string]: any;\r\n\r\n    /**\r\n     * Optional custom fetch function to use for sending the request.\r\n     */\r\n    fetch?: (url: RequestInfo | URL, config?: RequestInit) => Promise<Response>;\r\n\r\n    /**\r\n     * Custom headers to send with the requests.\r\n     */\r\n    headers?: { [key: string]: string };\r\n\r\n    /**\r\n     * The body of the request (serialized automatically for json requests).\r\n     */\r\n    body?: any;\r\n\r\n    /**\r\n     * Query parameters that will be appended to the request url.\r\n     */\r\n    query?: { [key: string]: any };\r\n\r\n    /**\r\n     * @deprecated use `query` instead\r\n     *\r\n     * for backward-compatibility `params` values are merged with `query`,\r\n     * but this option may get removed in the final v1 release\r\n     */\r\n    params?: { [key: string]: any };\r\n\r\n    /**\r\n     * The request identifier that can be used to cancel pending requests.\r\n     */\r\n    requestKey?: string | null;\r\n\r\n    /**\r\n     * @deprecated use `requestKey:string` instead\r\n     */\r\n    $cancelKey?: string;\r\n\r\n    /**\r\n     * @deprecated use `requestKey:null` instead\r\n     */\r\n    $autoCancel?: boolean;\r\n}\r\n\r\nexport interface CommonOptions extends SendOptions {\r\n    fields?: string;\r\n}\r\n\r\nexport interface ListOptions extends CommonOptions {\r\n    page?: number;\r\n    perPage?: number;\r\n    sort?: string;\r\n    filter?: string;\r\n    skipTotal?: boolean;\r\n}\r\n\r\nexport interface FullListOptions extends ListOptions {\r\n    batch?: number;\r\n}\r\n\r\nexport interface RecordOptions extends CommonOptions {\r\n    expand?: string;\r\n}\r\n\r\nexport interface RecordListOptions extends ListOptions, RecordOptions {}\r\n\r\nexport interface RecordFullListOptions extends FullListOptions, RecordOptions {}\r\n\r\nexport interface RecordSubscribeOptions extends SendOptions {\r\n    fields?: string;\r\n    filter?: string;\r\n    expand?: string;\r\n}\r\n\r\nexport interface LogStatsOptions extends CommonOptions {\r\n    filter?: string;\r\n}\r\n\r\nexport interface FileOptions extends CommonOptions {\r\n    thumb?: string;\r\n    download?: boolean;\r\n}\r\n\r\nexport interface AuthOptions extends CommonOptions {\r\n    /**\r\n     * If autoRefreshThreshold is set it will take care to auto refresh\r\n     * when necessary the auth data before each request to ensure that\r\n     * the auth state is always valid.\r\n     *\r\n     * The value must be in seconds, aka. the amount of seconds\r\n     * that will be subtracted from the current token `exp` claim in order\r\n     * to determine whether it is going to expire within the specified time threshold.\r\n     *\r\n     * For example, if you want to auto refresh the token if it is\r\n     * going to expire in the next 30mins (or already has expired),\r\n     * it can be set to `1800`\r\n     */\r\n    autoRefreshThreshold?: number;\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// list of known SendOptions keys (everything else is treated as query param)\r\nconst knownSendOptionsKeys = [\r\n    \"requestKey\",\r\n    \"$cancelKey\",\r\n    \"$autoCancel\",\r\n    \"fetch\",\r\n    \"headers\",\r\n    \"body\",\r\n    \"query\",\r\n    \"params\",\r\n    // ---,\r\n    \"cache\",\r\n    \"credentials\",\r\n    \"headers\",\r\n    \"integrity\",\r\n    \"keepalive\",\r\n    \"method\",\r\n    \"mode\",\r\n    \"redirect\",\r\n    \"referrer\",\r\n    \"referrerPolicy\",\r\n    \"signal\",\r\n    \"window\",\r\n];\r\n\r\n// modifies in place the provided options by moving unknown send options as query parameters.\r\nexport function normalizeUnknownQueryParams(options?: SendOptions): void {\r\n    if (!options) {\r\n        return;\r\n    }\r\n\r\n    options.query = options.query || {};\r\n    for (let key in options) {\r\n        if (knownSendOptionsKeys.includes(key)) {\r\n            continue;\r\n        }\r\n\r\n        options.query[key] = options[key];\r\n        delete options[key];\r\n    }\r\n}\r\n\r\nexport function serializeQueryParams(params: { [key: string]: any }): string {\r\n    const result: Array<string> = [];\r\n\r\n    for (const key in params) {\r\n        const encodedKey = encodeURIComponent(key);\r\n        const arrValue = Array.isArray(params[key]) ? params[key] : [params[key]];\r\n\r\n        for (let v of arrValue) {\r\n            v = prepareQueryParamValue(v);\r\n            if (v === null) {\r\n                continue;\r\n            }\r\n            result.push(encodedKey + \"=\" + v);\r\n        }\r\n    }\r\n\r\n    return result.join(\"&\");\r\n}\r\n\r\n// encodes and normalizes the provided query param value.\r\nfunction prepareQueryParamValue(value: any): null | string {\r\n    if (value === null || typeof value === \"undefined\") {\r\n        return null;\r\n    }\r\n\r\n    if (value instanceof Date) {\r\n        return encodeURIComponent(value.toISOString().replace(\"T\", \" \"));\r\n    }\r\n\r\n    if (typeof value === \"object\") {\r\n        return encodeURIComponent(JSON.stringify(value));\r\n    }\r\n\r\n    return encodeURIComponent(value);\r\n}\r\n","import { ClientResponseError } from \"@/ClientResponseError\";\r\nimport { BaseService } from \"@/services/BaseService\";\r\nimport { SendOptions, normalizeUnknownQueryParams } from \"@/tools/options\";\r\n\r\ninterface promiseCallbacks {\r\n    resolve: Function;\r\n    reject: Function;\r\n}\r\n\r\ntype Subscriptions = { [key: string]: Array<EventListener> };\r\n\r\nexport type UnsubscribeFunc = () => Promise<void>;\r\n\r\nexport class RealtimeService extends BaseService {\r\n    clientId: string = \"\";\r\n\r\n    private eventSource: EventSource | null = null;\r\n    private subscriptions: Subscriptions = {};\r\n    private lastSentSubscriptions: Array<string> = [];\r\n    private connectTimeoutId: any;\r\n    private maxConnectTimeout: number = 15000;\r\n    private reconnectTimeoutId: any;\r\n    private reconnectAttempts: number = 0;\r\n    private maxReconnectAttempts: number = Infinity;\r\n    private predefinedReconnectIntervals: Array<number> = [\r\n        200, 300, 500, 1000, 1200, 1500, 2000,\r\n    ];\r\n    private pendingConnects: Array<promiseCallbacks> = [];\r\n\r\n    /**\r\n     * Returns whether the realtime connection has been established.\r\n     */\r\n    get isConnected(): boolean {\r\n        return !!this.eventSource && !!this.clientId && !this.pendingConnects.length;\r\n    }\r\n\r\n    /**\r\n     * An optional hook that is invoked when the realtime client disconnects\r\n     * either when unsubscribing from all subscriptions or when the\r\n     * connection was interrupted or closed by the server.\r\n     *\r\n     * The received argument could be used to determine whether the disconnect\r\n     * is a result from unsubscribing (`activeSubscriptions.length == 0`)\r\n     * or because of network/server error (`activeSubscriptions.length > 0`).\r\n     *\r\n     * If you want to listen for the opposite, aka. when the client connection is established,\r\n     * subscribe to the `PB_CONNECT` event.\r\n     */\r\n    onDisconnect?: (activeSubscriptions: Array<string>) => void;\r\n\r\n    /**\r\n     * Register the subscription listener.\r\n     *\r\n     * You can subscribe multiple times to the same topic.\r\n     *\r\n     * If the SSE connection is not started yet,\r\n     * this method will also initialize it.\r\n     */\r\n    async subscribe(\r\n        topic: string,\r\n        callback: (data: any) => void,\r\n        options?: SendOptions,\r\n    ): Promise<UnsubscribeFunc> {\r\n        if (!topic) {\r\n            throw new Error(\"topic must be set.\");\r\n        }\r\n\r\n        let key = topic;\r\n\r\n        // serialize and append the topic options (if any)\r\n        if (options) {\r\n            options = Object.assign({}, options); // shallow copy\r\n            normalizeUnknownQueryParams(options);\r\n            const serialized =\r\n                \"options=\" +\r\n                encodeURIComponent(\r\n                    JSON.stringify({ query: options.query, headers: options.headers }),\r\n                );\r\n            key += (key.includes(\"?\") ? \"&\" : \"?\") + serialized;\r\n        }\r\n\r\n        const listener = function (e: Event) {\r\n            const msgEvent = e as MessageEvent;\r\n\r\n            let data;\r\n            try {\r\n                data = JSON.parse(msgEvent?.data);\r\n            } catch {}\r\n\r\n            callback(data || {});\r\n        };\r\n\r\n        // store the listener\r\n        if (!this.subscriptions[key]) {\r\n            this.subscriptions[key] = [];\r\n        }\r\n        this.subscriptions[key].push(listener);\r\n\r\n        if (!this.isConnected) {\r\n            // initialize sse connection\r\n            await this.connect();\r\n        } else if (this.subscriptions[key].length === 1) {\r\n            // send the updated subscriptions (if it is the first for the key)\r\n            await this.submitSubscriptions();\r\n        } else {\r\n            // only register the listener\r\n            this.eventSource?.addEventListener(key, listener);\r\n        }\r\n\r\n        return async (): Promise<void> => {\r\n            return this.unsubscribeByTopicAndListener(topic, listener);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from all subscription listeners with the specified topic.\r\n     *\r\n     * If `topic` is not provided, then this method will unsubscribe\r\n     * from all active subscriptions.\r\n     *\r\n     * This method is no-op if there are no active subscriptions.\r\n     *\r\n     * The related sse connection will be autoclosed if after the\r\n     * unsubscribe operation there are no active subscriptions left.\r\n     */\r\n    async unsubscribe(topic?: string): Promise<void> {\r\n        let needToSubmit = false;\r\n\r\n        if (!topic) {\r\n            // remove all subscriptions\r\n            this.subscriptions = {};\r\n        } else {\r\n            // remove all listeners related to the topic\r\n            const subs = this.getSubscriptionsByTopic(topic);\r\n            for (let key in subs) {\r\n                if (!this.hasSubscriptionListeners(key)) {\r\n                    continue; // already unsubscribed\r\n                }\r\n\r\n                for (let listener of this.subscriptions[key]) {\r\n                    this.eventSource?.removeEventListener(key, listener);\r\n                }\r\n                delete this.subscriptions[key];\r\n\r\n                // mark for subscriptions change submit if there are no other listeners\r\n                if (!needToSubmit) {\r\n                    needToSubmit = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.hasSubscriptionListeners()) {\r\n            // no other active subscriptions -> close the sse connection\r\n            this.disconnect();\r\n        } else if (needToSubmit) {\r\n            await this.submitSubscriptions();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from all subscription listeners starting with the specified topic prefix.\r\n     *\r\n     * This method is no-op if there are no active subscriptions with the specified topic prefix.\r\n     *\r\n     * The related sse connection will be autoclosed if after the\r\n     * unsubscribe operation there are no active subscriptions left.\r\n     */\r\n    async unsubscribeByPrefix(keyPrefix: string): Promise<void> {\r\n        let hasAtleastOneTopic = false;\r\n        for (let key in this.subscriptions) {\r\n            // \"?\" so that it can be used as end delimiter for the prefix\r\n            if (!(key + \"?\").startsWith(keyPrefix)) {\r\n                continue;\r\n            }\r\n\r\n            hasAtleastOneTopic = true;\r\n            for (let listener of this.subscriptions[key]) {\r\n                this.eventSource?.removeEventListener(key, listener);\r\n            }\r\n            delete this.subscriptions[key];\r\n        }\r\n\r\n        if (!hasAtleastOneTopic) {\r\n            return; // nothing to unsubscribe from\r\n        }\r\n\r\n        if (this.hasSubscriptionListeners()) {\r\n            // submit the deleted subscriptions\r\n            await this.submitSubscriptions();\r\n        } else {\r\n            // no other active subscriptions -> close the sse connection\r\n            this.disconnect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from all subscriptions matching the specified topic and listener function.\r\n     *\r\n     * This method is no-op if there are no active subscription with\r\n     * the specified topic and listener.\r\n     *\r\n     * The related sse connection will be autoclosed if after the\r\n     * unsubscribe operation there are no active subscriptions left.\r\n     */\r\n    async unsubscribeByTopicAndListener(\r\n        topic: string,\r\n        listener: EventListener,\r\n    ): Promise<void> {\r\n        let needToSubmit = false;\r\n\r\n        const subs = this.getSubscriptionsByTopic(topic);\r\n        for (let key in subs) {\r\n            if (\r\n                !Array.isArray(this.subscriptions[key]) ||\r\n                !this.subscriptions[key].length\r\n            ) {\r\n                continue; // already unsubscribed\r\n            }\r\n\r\n            let exist = false;\r\n            for (let i = this.subscriptions[key].length - 1; i >= 0; i--) {\r\n                if (this.subscriptions[key][i] !== listener) {\r\n                    continue;\r\n                }\r\n\r\n                exist = true; // has at least one matching listener\r\n                delete this.subscriptions[key][i]; // removes the function reference\r\n                this.subscriptions[key].splice(i, 1); // reindex the array\r\n                this.eventSource?.removeEventListener(key, listener);\r\n            }\r\n            if (!exist) {\r\n                continue;\r\n            }\r\n\r\n            // remove the key from the subscriptions list if there are no other listeners\r\n            if (!this.subscriptions[key].length) {\r\n                delete this.subscriptions[key];\r\n            }\r\n\r\n            // mark for subscriptions change submit if there are no other listeners\r\n            if (!needToSubmit && !this.hasSubscriptionListeners(key)) {\r\n                needToSubmit = true;\r\n            }\r\n        }\r\n\r\n        if (!this.hasSubscriptionListeners()) {\r\n            // no other active subscriptions -> close the sse connection\r\n            this.disconnect();\r\n        } else if (needToSubmit) {\r\n            await this.submitSubscriptions();\r\n        }\r\n    }\r\n\r\n    private hasSubscriptionListeners(keyToCheck?: string): boolean {\r\n        this.subscriptions = this.subscriptions || {};\r\n\r\n        // check the specified key\r\n        if (keyToCheck) {\r\n            return !!this.subscriptions[keyToCheck]?.length;\r\n        }\r\n\r\n        // check for at least one non-empty subscription\r\n        for (let key in this.subscriptions) {\r\n            if (!!this.subscriptions[key]?.length) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private async submitSubscriptions(): Promise<void> {\r\n        if (!this.clientId) {\r\n            return; // no client/subscriber\r\n        }\r\n\r\n        // optimistic update\r\n        this.addAllSubscriptionListeners();\r\n\r\n        this.lastSentSubscriptions = this.getNonEmptySubscriptionKeys();\r\n\r\n        return this.client\r\n            .send(\"/api/realtime\", {\r\n                method: \"POST\",\r\n                body: {\r\n                    clientId: this.clientId,\r\n                    subscriptions: this.lastSentSubscriptions,\r\n                },\r\n                requestKey: this.getSubscriptionsCancelKey(),\r\n            })\r\n            .catch((err) => {\r\n                if (err?.isAbort) {\r\n                    return; // silently ignore aborted pending requests\r\n                }\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    private getSubscriptionsCancelKey(): string {\r\n        return \"realtime_\" + this.clientId;\r\n    }\r\n\r\n    private getSubscriptionsByTopic(topic: string): Subscriptions {\r\n        const result: Subscriptions = {};\r\n\r\n        // \"?\" so that it can be used as end delimiter for the topic\r\n        topic = topic.includes(\"?\") ? topic : topic + \"?\";\r\n\r\n        for (let key in this.subscriptions) {\r\n            if ((key + \"?\").startsWith(topic)) {\r\n                result[key] = this.subscriptions[key];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private getNonEmptySubscriptionKeys(): Array<string> {\r\n        const result: Array<string> = [];\r\n\r\n        for (let key in this.subscriptions) {\r\n            if (this.subscriptions[key].length) {\r\n                result.push(key);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private addAllSubscriptionListeners(): void {\r\n        if (!this.eventSource) {\r\n            return;\r\n        }\r\n\r\n        this.removeAllSubscriptionListeners();\r\n\r\n        for (let key in this.subscriptions) {\r\n            for (let listener of this.subscriptions[key]) {\r\n                this.eventSource.addEventListener(key, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeAllSubscriptionListeners(): void {\r\n        if (!this.eventSource) {\r\n            return;\r\n        }\r\n\r\n        for (let key in this.subscriptions) {\r\n            for (let listener of this.subscriptions[key]) {\r\n                this.eventSource.removeEventListener(key, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async connect(): Promise<void> {\r\n        if (this.reconnectAttempts > 0) {\r\n            // immediately resolve the promise to avoid indefinitely\r\n            // blocking the client during reconnection\r\n            return;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.pendingConnects.push({ resolve, reject });\r\n\r\n            if (this.pendingConnects.length > 1) {\r\n                // all promises will be resolved once the connection is established\r\n                return;\r\n            }\r\n\r\n            this.initConnect();\r\n        });\r\n    }\r\n\r\n    private initConnect() {\r\n        this.disconnect(true);\r\n\r\n        // wait up to 15s for connect\r\n        clearTimeout(this.connectTimeoutId);\r\n        this.connectTimeoutId = setTimeout(() => {\r\n            this.connectErrorHandler(new Error(\"EventSource connect took too long.\"));\r\n        }, this.maxConnectTimeout);\r\n\r\n        this.eventSource = new EventSource(this.client.buildURL(\"/api/realtime\"));\r\n\r\n        this.eventSource.onerror = (_) => {\r\n            this.connectErrorHandler(\r\n                new Error(\"Failed to establish realtime connection.\"),\r\n            );\r\n        };\r\n\r\n        this.eventSource.addEventListener(\"PB_CONNECT\", (e) => {\r\n            const msgEvent = e as MessageEvent;\r\n            this.clientId = msgEvent?.lastEventId;\r\n\r\n            this.submitSubscriptions()\r\n                .then(async () => {\r\n                    let retries = 3;\r\n                    while (this.hasUnsentSubscriptions() && retries > 0) {\r\n                        retries--;\r\n                        // resubscribe to ensure that the latest topics are submitted\r\n                        //\r\n                        // This is needed because missed topics could happen on reconnect\r\n                        // if after the pending sent `submitSubscriptions()` call another `subscribe()`\r\n                        // was made before the submit was able to complete.\r\n                        await this.submitSubscriptions();\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    for (let p of this.pendingConnects) {\r\n                        p.resolve();\r\n                    }\r\n\r\n                    // reset connect meta\r\n                    this.pendingConnects = [];\r\n                    this.reconnectAttempts = 0;\r\n                    clearTimeout(this.reconnectTimeoutId);\r\n                    clearTimeout(this.connectTimeoutId);\r\n\r\n                    // propagate the PB_CONNECT event\r\n                    const connectSubs = this.getSubscriptionsByTopic(\"PB_CONNECT\");\r\n                    for (let key in connectSubs) {\r\n                        for (let listener of connectSubs[key]) {\r\n                            listener(e);\r\n                        }\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    this.clientId = \"\";\r\n                    this.connectErrorHandler(err);\r\n                });\r\n        });\r\n    }\r\n\r\n    private hasUnsentSubscriptions(): boolean {\r\n        const latestTopics = this.getNonEmptySubscriptionKeys();\r\n        if (latestTopics.length != this.lastSentSubscriptions.length) {\r\n            return true;\r\n        }\r\n\r\n        for (const t of latestTopics) {\r\n            if (!this.lastSentSubscriptions.includes(t)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private connectErrorHandler(err: any) {\r\n        clearTimeout(this.connectTimeoutId);\r\n        clearTimeout(this.reconnectTimeoutId);\r\n\r\n        if (\r\n            // wasn't previously connected -> direct reject\r\n            (!this.clientId && !this.reconnectAttempts) ||\r\n            // was previously connected but the max reconnection limit has been reached\r\n            this.reconnectAttempts > this.maxReconnectAttempts\r\n        ) {\r\n            for (let p of this.pendingConnects) {\r\n                p.reject(new ClientResponseError(err));\r\n            }\r\n            this.pendingConnects = [];\r\n            this.disconnect();\r\n            return;\r\n        }\r\n\r\n        // otherwise -> reconnect in the background\r\n        this.disconnect(true);\r\n        const timeout =\r\n            this.predefinedReconnectIntervals[this.reconnectAttempts] ||\r\n            this.predefinedReconnectIntervals[\r\n                this.predefinedReconnectIntervals.length - 1\r\n            ];\r\n        this.reconnectAttempts++;\r\n        this.reconnectTimeoutId = setTimeout(() => {\r\n            this.initConnect();\r\n        }, timeout);\r\n    }\r\n\r\n    private disconnect(fromReconnect = false): void {\r\n        if (this.clientId && this.onDisconnect) {\r\n            this.onDisconnect(Object.keys(this.subscriptions));\r\n        }\r\n\r\n        clearTimeout(this.connectTimeoutId);\r\n        clearTimeout(this.reconnectTimeoutId);\r\n        this.removeAllSubscriptionListeners();\r\n        this.client.cancelRequest(this.getSubscriptionsCancelKey());\r\n        this.eventSource?.close();\r\n        this.eventSource = null;\r\n        this.clientId = \"\";\r\n\r\n        if (!fromReconnect) {\r\n            this.reconnectAttempts = 0;\r\n\r\n            // resolve any remaining connect promises\r\n            //\r\n            // this is done to avoid unnecessary throwing errors in case\r\n            // unsubscribe is called before the pending connect promises complete\r\n            // (see https://github.com/pocketbase/pocketbase/discussions/2897#discussioncomment-6423818)\r\n            for (let p of this.pendingConnects) {\r\n                p.resolve();\r\n            }\r\n            this.pendingConnects = [];\r\n        }\r\n    }\r\n}\r\n","import { BaseService } from \"@/services/BaseService\";\r\nimport { ClientResponseError } from \"@/ClientResponseError\";\r\nimport { ListResult } from \"@/tools/dtos\";\r\nimport { CommonOptions, ListOptions, FullListOptions } from \"@/tools/options\";\r\n\r\nexport abstract class CrudService<M> extends BaseService {\r\n    /**\r\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\r\n     */\r\n    abstract get baseCrudPath(): string;\r\n\r\n    /**\r\n     * Response data decoder.\r\n     */\r\n    decode<T = M>(data: { [key: string]: any }): T {\r\n        return data as T;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise with all list items batch fetched at once\r\n     * (by default 500 items per request; to change it set the `batch` query param).\r\n     *\r\n     * You can use the generic T to supply a wrapper type of the crud model.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getFullList<T = M>(options?: FullListOptions): Promise<Array<T>>;\r\n\r\n    /**\r\n     * Legacy version of getFullList with explicitly specified batch size.\r\n     */\r\n    async getFullList<T = M>(batch?: number, options?: ListOptions): Promise<Array<T>>;\r\n\r\n    async getFullList<T = M>(\r\n        batchOrqueryParams?: number | FullListOptions,\r\n        options?: ListOptions,\r\n    ): Promise<Array<T>> {\r\n        if (typeof batchOrqueryParams == \"number\") {\r\n            return this._getFullList<T>(batchOrqueryParams, options);\r\n        }\r\n\r\n        options = Object.assign({}, batchOrqueryParams, options);\r\n\r\n        let batch = 500;\r\n        if (options.batch) {\r\n            batch = options.batch;\r\n            delete options.batch;\r\n        }\r\n\r\n        return this._getFullList<T>(batch, options);\r\n    }\r\n\r\n    /**\r\n     * Returns paginated items list.\r\n     *\r\n     * You can use the generic T to supply a wrapper type of the crud model.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getList<T = M>(\r\n        page = 1,\r\n        perPage = 30,\r\n        options?: ListOptions,\r\n    ): Promise<ListResult<T>> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        options.query = Object.assign(\r\n            {\r\n                page: page,\r\n                perPage: perPage,\r\n            },\r\n            options.query,\r\n        );\r\n\r\n        return this.client.send(this.baseCrudPath, options).then((responseData: any) => {\r\n            responseData.items =\r\n                responseData.items?.map((item: any) => {\r\n                    return this.decode<T>(item);\r\n                }) || [];\r\n\r\n            return responseData;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the first found item by the specified filter.\r\n     *\r\n     * Internally it calls `getList(1, 1, { filter, skipTotal })` and\r\n     * returns the first found item.\r\n     *\r\n     * You can use the generic T to supply a wrapper type of the crud model.\r\n     *\r\n     * For consistency with `getOne`, this method will throw a 404\r\n     * ClientResponseError if no item was found.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getFirstListItem<T = M>(filter: string, options?: CommonOptions): Promise<T> {\r\n        options = Object.assign(\r\n            {\r\n                requestKey: \"one_by_filter_\" + this.baseCrudPath + \"_\" + filter,\r\n            },\r\n            options,\r\n        );\r\n\r\n        options.query = Object.assign(\r\n            {\r\n                filter: filter,\r\n                skipTotal: 1,\r\n            },\r\n            options.query,\r\n        );\r\n\r\n        return this.getList<T>(1, 1, options).then((result) => {\r\n            if (!result?.items?.length) {\r\n                throw new ClientResponseError({\r\n                    status: 404,\r\n                    response: {\r\n                        code: 404,\r\n                        message: \"The requested resource wasn't found.\",\r\n                        data: {},\r\n                    },\r\n                });\r\n            }\r\n\r\n            return result.items[0];\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns single item by its id.\r\n     *\r\n     * You can use the generic T to supply a wrapper type of the crud model.\r\n     *\r\n     * If `id` is empty it will throw a 404 error.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getOne<T = M>(id: string, options?: CommonOptions): Promise<T> {\r\n        if (!id) {\r\n            throw new ClientResponseError({\r\n                url: this.client.buildURL(this.baseCrudPath + \"/\"),\r\n                status: 404,\r\n                response: {\r\n                    code: 404,\r\n                    message: \"Missing required record id.\",\r\n                    data: {},\r\n                },\r\n            });\r\n        }\r\n\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\r\n            .then((responseData: any) => this.decode<T>(responseData));\r\n    }\r\n\r\n    /**\r\n     * Creates a new item.\r\n     *\r\n     * You can use the generic T to supply a wrapper type of the crud model.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async create<T = M>(\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: CommonOptions,\r\n    ): Promise<T> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: bodyParams,\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCrudPath, options)\r\n            .then((responseData: any) => this.decode<T>(responseData));\r\n    }\r\n\r\n    /**\r\n     * Updates an existing item by its id.\r\n     *\r\n     * You can use the generic T to supply a wrapper type of the crud model.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async update<T = M>(\r\n        id: string,\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: CommonOptions,\r\n    ): Promise<T> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"PATCH\",\r\n                body: bodyParams,\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\r\n            .then((responseData: any) => this.decode<T>(responseData));\r\n    }\r\n\r\n    /**\r\n     * Deletes an existing item by its id.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"DELETE\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCrudPath + \"/\" + encodeURIComponent(id), options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Returns a promise with all list items batch fetched at once.\r\n     */\r\n    protected _getFullList<T = M>(\r\n        batchSize = 500,\r\n        options?: ListOptions,\r\n    ): Promise<Array<T>> {\r\n        options = options || {};\r\n        options.query = Object.assign(\r\n            {\r\n                skipTotal: 1,\r\n            },\r\n            options.query,\r\n        );\r\n\r\n        let result: Array<T> = [];\r\n\r\n        let request = async (page: number): Promise<Array<any>> => {\r\n            return this.getList(page, batchSize || 500, options).then((list) => {\r\n                const castedList = list as any as ListResult<T>;\r\n                const items = castedList.items;\r\n\r\n                result = result.concat(items);\r\n\r\n                if (items.length == list.perPage) {\r\n                    return request(page + 1);\r\n                }\r\n\r\n                return result;\r\n            });\r\n        };\r\n\r\n        return request(1);\r\n    }\r\n}\r\n","import { SendOptions } from \"@/tools/options\";\r\n\r\nexport function normalizeLegacyOptionsArgs(\r\n    legacyWarn: string,\r\n    baseOptions: SendOptions,\r\n    bodyOrOptions?: any,\r\n    query?: any,\r\n): SendOptions {\r\n    const hasBodyOrOptions = typeof bodyOrOptions !== \"undefined\";\r\n    const hasQuery = typeof query !== \"undefined\";\r\n\r\n    if (!hasQuery && !hasBodyOrOptions) {\r\n        return baseOptions;\r\n    }\r\n\r\n    if (hasQuery) {\r\n        console.warn(legacyWarn);\r\n        baseOptions.body = Object.assign({}, baseOptions.body, bodyOrOptions);\r\n        baseOptions.query = Object.assign({}, baseOptions.query, query);\r\n\r\n        return baseOptions;\r\n    }\r\n\r\n    return Object.assign(baseOptions, bodyOrOptions);\r\n}\r\n","import Client from \"@/Client\";\r\nimport { isTokenExpired } from \"@/tools/jwt\";\r\n\r\n// reset previous auto refresh registrations\r\nexport function resetAutoRefresh(client: Client) {\r\n    (client as any)._resetAutoRefresh?.();\r\n}\r\n\r\nexport function registerAutoRefresh(\r\n    client: Client,\r\n    threshold: number,\r\n    refreshFunc: () => Promise<any>,\r\n    reauthenticateFunc: () => Promise<any>,\r\n) {\r\n    resetAutoRefresh(client);\r\n\r\n    const oldBeforeSend = client.beforeSend;\r\n    const oldModel = client.authStore.record;\r\n\r\n    // unset the auto refresh in case the auth store was cleared\r\n    // OR a new model was authenticated\r\n    const unsubStoreChange = client.authStore.onChange((newToken, model) => {\r\n        if (\r\n            !newToken ||\r\n            model?.id != oldModel?.id ||\r\n            ((model?.collectionId || oldModel?.collectionId) &&\r\n                model?.collectionId != oldModel?.collectionId)\r\n        ) {\r\n            resetAutoRefresh(client);\r\n        }\r\n    });\r\n\r\n    // initialize a reset function and attach it dynamically to the client\r\n    (client as any)._resetAutoRefresh = function () {\r\n        unsubStoreChange();\r\n        client.beforeSend = oldBeforeSend;\r\n        delete (client as any)._resetAutoRefresh;\r\n    };\r\n\r\n    client.beforeSend = async (url, sendOptions) => {\r\n        const oldToken = client.authStore.token;\r\n\r\n        if (sendOptions.query?.autoRefresh) {\r\n            return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\r\n        }\r\n\r\n        let isValid = client.authStore.isValid;\r\n        if (\r\n            // is loosely valid\r\n            isValid &&\r\n            // but it is going to expire in the next \"threshold\" seconds\r\n            isTokenExpired(client.authStore.token, threshold)\r\n        ) {\r\n            try {\r\n                await refreshFunc();\r\n            } catch (_) {\r\n                isValid = false;\r\n            }\r\n        }\r\n\r\n        // still invalid -> reauthenticate\r\n        if (!isValid) {\r\n            await reauthenticateFunc();\r\n        }\r\n\r\n        // the request wasn't sent with a custom token\r\n        const headers = sendOptions.headers || {};\r\n        for (let key in headers) {\r\n            if (\r\n                key.toLowerCase() == \"authorization\" &&\r\n                // the request wasn't sent with a custom token\r\n                oldToken == headers[key] &&\r\n                client.authStore.token\r\n            ) {\r\n                // set the latest store token\r\n                headers[key] = client.authStore.token;\r\n                break;\r\n            }\r\n        }\r\n        sendOptions.headers = headers;\r\n\r\n        return oldBeforeSend ? oldBeforeSend(url, sendOptions) : { url, sendOptions };\r\n    };\r\n}\r\n","import Client from \"@/Client\";\r\nimport { ClientResponseError } from \"@/ClientResponseError\";\r\nimport { RealtimeService, UnsubscribeFunc } from \"@/services/RealtimeService\";\r\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\r\nimport { CrudService } from \"@/services/CrudService\";\r\nimport { ListResult, RecordModel } from \"@/tools/dtos\";\r\nimport { normalizeLegacyOptionsArgs } from \"@/tools/legacy\";\r\nimport {\r\n    CommonOptions,\r\n    RecordFullListOptions,\r\n    RecordListOptions,\r\n    RecordOptions,\r\n    SendOptions,\r\n    RecordSubscribeOptions,\r\n} from \"@/tools/options\";\r\nimport { getTokenPayload } from \"@/tools/jwt\";\r\nimport { registerAutoRefresh, resetAutoRefresh } from \"@/tools/refresh\";\r\n\r\nexport interface RecordAuthResponse<T = RecordModel> {\r\n    /**\r\n     * The signed PocketBase auth record.\r\n     */\r\n    record: T;\r\n\r\n    /**\r\n     * The PocketBase record auth token.\r\n     *\r\n     * If you are looking for the OAuth2 access and refresh tokens\r\n     * they are available under the `meta.accessToken` and `meta.refreshToken` props.\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * Auth meta data usually filled when OAuth2 is used.\r\n     */\r\n    meta?: { [key: string]: any };\r\n}\r\n\r\nexport interface AuthProviderInfo {\r\n    name: string;\r\n    displayName: string;\r\n    state: string;\r\n    authURL: string;\r\n    codeVerifier: string;\r\n    codeChallenge: string;\r\n    codeChallengeMethod: string;\r\n}\r\n\r\nexport interface AuthMethodsList {\r\n    mfa: {\r\n        enabled: boolean;\r\n        duration: number;\r\n    };\r\n    otp: {\r\n        enabled: boolean;\r\n        duration: number;\r\n    };\r\n    password: {\r\n        enabled: boolean;\r\n        identityFields: Array<string>;\r\n    };\r\n    oauth2: {\r\n        enabled: boolean;\r\n        providers: Array<AuthProviderInfo>;\r\n    };\r\n}\r\n\r\nexport interface RecordSubscription<T = RecordModel> {\r\n    action: string; // eg. create, update, delete\r\n    record: T;\r\n}\r\n\r\nexport type OAuth2UrlCallback = (url: string) => void | Promise<void>;\r\n\r\nexport interface OAuth2AuthConfig extends SendOptions {\r\n    // the name of the OAuth2 provider (eg. \"google\")\r\n    provider: string;\r\n\r\n    // custom scopes to overwrite the default ones\r\n    scopes?: Array<string>;\r\n\r\n    // optional record create data\r\n    createData?: { [key: string]: any };\r\n\r\n    // optional query params to send with the OAuth2 auth request\r\n    params?: { [key: string]: any };\r\n\r\n    // optional callback that is triggered after the OAuth2 sign-in/sign-up url generation\r\n    urlCallback?: OAuth2UrlCallback;\r\n\r\n    // optional query params to send with the PocketBase auth request (eg. fields, expand, etc.)\r\n    query?: RecordOptions;\r\n}\r\n\r\nexport interface OTPResponse {\r\n    otpId: string;\r\n}\r\n\r\nexport class RecordService<M = RecordModel> extends CrudService<M> {\r\n    readonly collectionIdOrName: string;\r\n\r\n    constructor(client: Client, collectionIdOrName: string) {\r\n        super(client);\r\n\r\n        this.collectionIdOrName = collectionIdOrName;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    get baseCrudPath(): string {\r\n        return this.baseCollectionPath + \"/records\";\r\n    }\r\n\r\n    /**\r\n     * Returns the current collection service base path.\r\n     */\r\n    get baseCollectionPath(): string {\r\n        return \"/api/collections/\" + encodeURIComponent(this.collectionIdOrName);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the current service collection is superusers.\r\n     */\r\n    get isSuperusers(): boolean {\r\n        return (\r\n            this.collectionIdOrName == \"_superusers\" ||\r\n            this.collectionIdOrName == \"_pbc_2773867675\"\r\n        );\r\n    }\r\n\r\n    // ---------------------------------------------------------------\r\n    // Realtime handlers\r\n    // ---------------------------------------------------------------\r\n\r\n    /**\r\n     * Subscribe to realtime changes to the specified topic (\"*\" or record id).\r\n     *\r\n     * If `topic` is the wildcard \"*\", then this method will subscribe to\r\n     * any record changes in the collection.\r\n     *\r\n     * If `topic` is a record id, then this method will subscribe only\r\n     * to changes of the specified record id.\r\n     *\r\n     * It's OK to subscribe multiple times to the same topic.\r\n     * You can use the returned `UnsubscribeFunc` to remove only a single subscription.\r\n     * Or use `unsubscribe(topic)` if you want to remove all subscriptions attached to the topic.\r\n     */\r\n    async subscribe<T = M>(\r\n        topic: string,\r\n        callback: (data: RecordSubscription<T>) => void,\r\n        options?: RecordSubscribeOptions,\r\n    ): Promise<UnsubscribeFunc> {\r\n        if (!topic) {\r\n            throw new Error(\"Missing topic.\");\r\n        }\r\n\r\n        if (!callback) {\r\n            throw new Error(\"Missing subscription callback.\");\r\n        }\r\n\r\n        return this.client.realtime.subscribe(\r\n            this.collectionIdOrName + \"/\" + topic,\r\n            callback,\r\n            options,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from all subscriptions of the specified topic\r\n     * (\"*\" or record id).\r\n     *\r\n     * If `topic` is not set, then this method will unsubscribe from\r\n     * all subscriptions associated to the current collection.\r\n     */\r\n    async unsubscribe(topic?: string): Promise<void> {\r\n        // unsubscribe from the specified topic\r\n        if (topic) {\r\n            return this.client.realtime.unsubscribe(\r\n                this.collectionIdOrName + \"/\" + topic,\r\n            );\r\n        }\r\n\r\n        // unsubscribe from everything related to the collection\r\n        return this.client.realtime.unsubscribeByPrefix(this.collectionIdOrName);\r\n    }\r\n\r\n    // ---------------------------------------------------------------\r\n    // Crud handers\r\n    // ---------------------------------------------------------------\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async getFullList<T = M>(options?: RecordFullListOptions): Promise<Array<T>>;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async getFullList<T = M>(\r\n        batch?: number,\r\n        options?: RecordListOptions,\r\n    ): Promise<Array<T>>;\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async getFullList<T = M>(\r\n        batchOrOptions?: number | RecordFullListOptions,\r\n        options?: RecordListOptions,\r\n    ): Promise<Array<T>> {\r\n        if (typeof batchOrOptions == \"number\") {\r\n            return super.getFullList<T>(batchOrOptions, options);\r\n        }\r\n\r\n        const params = Object.assign({}, batchOrOptions, options);\r\n\r\n        return super.getFullList<T>(params);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async getList<T = M>(\r\n        page = 1,\r\n        perPage = 30,\r\n        options?: RecordListOptions,\r\n    ): Promise<ListResult<T>> {\r\n        return super.getList<T>(page, perPage, options);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async getFirstListItem<T = M>(\r\n        filter: string,\r\n        options?: RecordListOptions,\r\n    ): Promise<T> {\r\n        return super.getFirstListItem<T>(filter, options);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async getOne<T = M>(id: string, options?: RecordOptions): Promise<T> {\r\n        return super.getOne<T>(id, options);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    async create<T = M>(\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: RecordOptions,\r\n    ): Promise<T> {\r\n        return super.create<T>(bodyParams, options);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * If the current `client.authStore.record` matches with the updated id, then\r\n     * on success the `client.authStore.record` will be updated with the new response record fields.\r\n     */\r\n    async update<T = M>(\r\n        id: string,\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: RecordOptions,\r\n    ): Promise<T> {\r\n        return super.update<RecordModel>(id, bodyParams, options).then((item) => {\r\n            if (\r\n                // is record auth\r\n                this.client.authStore.record?.id === item?.id &&\r\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\r\n                    this.client.authStore.record?.collectionName ===\r\n                        this.collectionIdOrName)\r\n            ) {\r\n                let authExpand = Object.assign({}, this.client.authStore.record.expand);\r\n                let authRecord = Object.assign({}, this.client.authStore.record, item);\r\n                if (authExpand) {\r\n                    // for now \"merge\" only top-level expand\r\n                    authRecord.expand = Object.assign(authExpand, item.expand);\r\n                }\r\n\r\n                this.client.authStore.save(this.client.authStore.token, authRecord);\r\n            }\r\n\r\n            return item as any as T;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * If the current `client.authStore.record` matches with the deleted id,\r\n     * then on success the `client.authStore` will be cleared.\r\n     */\r\n    async delete(id: string, options?: CommonOptions): Promise<boolean> {\r\n        return super.delete(id, options).then((success) => {\r\n            if (\r\n                success &&\r\n                // is record auth\r\n                this.client.authStore.record?.id === id &&\r\n                (this.client.authStore.record?.collectionId === this.collectionIdOrName ||\r\n                    this.client.authStore.record?.collectionName ===\r\n                        this.collectionIdOrName)\r\n            ) {\r\n                this.client.authStore.clear();\r\n            }\r\n\r\n            return success;\r\n        });\r\n    }\r\n\r\n    // ---------------------------------------------------------------\r\n    // Auth handlers\r\n    // ---------------------------------------------------------------\r\n\r\n    /**\r\n     * Prepare successful collection authorization response.\r\n     */\r\n    protected authResponse<T = M>(responseData: any): RecordAuthResponse<T> {\r\n        const record = this.decode(responseData?.record || {});\r\n\r\n        this.client.authStore.save(responseData?.token, record as any);\r\n\r\n        return Object.assign({}, responseData, {\r\n            // normalize common fields\r\n            token: responseData?.token || \"\",\r\n            record: record as any as T,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns all available collection auth methods.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async listAuthMethods(options?: CommonOptions): Promise<AuthMethodsList> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n                // @todo remove after deleting the pre v0.23 API response fields\r\n                fields: \"mfa,otp,password,oauth2\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(this.baseCollectionPath + \"/auth-methods\", options);\r\n    }\r\n\r\n    /**\r\n     * Authenticate a single auth collection record via its username/email and password.\r\n     *\r\n     * On success, this method also automatically updates\r\n     * the client's AuthStore data and returns:\r\n     * - the authentication token\r\n     * - the authenticated record model\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async authWithPassword<T = M>(\r\n        usernameOrEmail: string,\r\n        password: string,\r\n        options?: RecordOptions,\r\n    ): Promise<RecordAuthResponse<T>> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: {\r\n                    identity: usernameOrEmail,\r\n                    password: password,\r\n                },\r\n            },\r\n            options,\r\n        );\r\n\r\n        // note: consider to deprecate\r\n        let autoRefreshThreshold;\r\n        if (this.isSuperusers) {\r\n            autoRefreshThreshold = options.autoRefreshThreshold;\r\n            delete options.autoRefreshThreshold;\r\n            if (!options.autoRefresh) {\r\n                resetAutoRefresh(this.client);\r\n            }\r\n        }\r\n\r\n        let authData = await this.client.send(\r\n            this.baseCollectionPath + \"/auth-with-password\",\r\n            options,\r\n        );\r\n\r\n        authData = this.authResponse<T>(authData);\r\n\r\n        if (autoRefreshThreshold && this.isSuperusers) {\r\n            registerAutoRefresh(\r\n                this.client,\r\n                autoRefreshThreshold,\r\n                () => this.authRefresh({ autoRefresh: true }),\r\n                () =>\r\n                    this.authWithPassword<T>(\r\n                        usernameOrEmail,\r\n                        password,\r\n                        Object.assign({ autoRefresh: true }, options),\r\n                    ),\r\n            );\r\n        }\r\n\r\n        return authData;\r\n    }\r\n\r\n    /**\r\n     * Authenticate a single auth collection record with OAuth2 code.\r\n     *\r\n     * If you don't have an OAuth2 code you may also want to check `authWithOAuth2` method.\r\n     *\r\n     * On success, this method also automatically updates\r\n     * the client's AuthStore data and returns:\r\n     * - the authentication token\r\n     * - the authenticated record model\r\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async authWithOAuth2Code<T = M>(\r\n        provider: string,\r\n        code: string,\r\n        codeVerifier: string,\r\n        redirectURL: string,\r\n        createData?: { [key: string]: any },\r\n        options?: RecordOptions,\r\n    ): Promise<RecordAuthResponse<T>>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createdData, options?).\r\n     */\r\n    async authWithOAuth2Code<T = M>(\r\n        provider: string,\r\n        code: string,\r\n        codeVerifier: string,\r\n        redirectURL: string,\r\n        createData?: { [key: string]: any },\r\n        body?: any,\r\n        query?: any,\r\n    ): Promise<RecordAuthResponse<T>>;\r\n\r\n    async authWithOAuth2Code<T = M>(\r\n        provider: string,\r\n        code: string,\r\n        codeVerifier: string,\r\n        redirectURL: string,\r\n        createData?: { [key: string]: any },\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<RecordAuthResponse<T>> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n            body: {\r\n                provider: provider,\r\n                code: code,\r\n                codeVerifier: codeVerifier,\r\n                redirectURL: redirectURL,\r\n                createData: createData,\r\n            },\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, body?, query?) is deprecated. Consider replacing it with authWithOAuth2Code(provider, code, codeVerifier, redirectURL, createData?, options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/auth-with-oauth2\", options)\r\n            .then((data) => this.authResponse<T>(data));\r\n    }\r\n\r\n    /**\r\n     * @deprecated This form of authWithOAuth2 is deprecated.\r\n     *\r\n     * Please use `authWithOAuth2Code()` OR its simplified realtime version\r\n     * as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\r\n     */\r\n    async authWithOAuth2<T = M>(\r\n        provider: string,\r\n        code: string,\r\n        codeVerifier: string,\r\n        redirectURL: string,\r\n        createData?: { [key: string]: any },\r\n        params?: { [key: string]: any },\r\n        bodyParams?: { [key: string]: any },\r\n        queryParams?: RecordOptions,\r\n    ): Promise<RecordAuthResponse<T>>;\r\n\r\n    /**\r\n     * Authenticate a single auth collection record with OAuth2\r\n     * **without custom redirects, deeplinks or even page reload**.\r\n     *\r\n     * This method initializes a one-off realtime subscription and will\r\n     * open a popup window with the OAuth2 vendor page to authenticate.\r\n     * Once the external OAuth2 sign-in/sign-up flow is completed, the popup\r\n     * window will be automatically closed and the OAuth2 data sent back\r\n     * to the user through the previously established realtime connection.\r\n     *\r\n     * You can specify an optional `urlCallback` prop to customize\r\n     * the default url `window.open` behavior.\r\n     *\r\n     * On success, this method also automatically updates\r\n     * the client's AuthStore data and returns:\r\n     * - the authentication token\r\n     * - the authenticated record model\r\n     * - the OAuth2 account data (eg. name, email, avatar, etc.)\r\n     *\r\n     * Example:\r\n     *\r\n     * ```js\r\n     * const authData = await pb.collection(\"users\").authWithOAuth2({\r\n     *     provider: \"google\",\r\n     * })\r\n     * ```\r\n     *\r\n     * Note1: When creating the OAuth2 app in the provider dashboard\r\n     * you have to configure `https://yourdomain.com/api/oauth2-redirect`\r\n     * as redirect URL.\r\n     *\r\n     * Note2: Safari may block the default `urlCallback` popup because\r\n     * it doesn't allow `window.open` calls as part of an `async` click functions.\r\n     * To workaround this you can either change your click handler to not be marked as `async`\r\n     * OR manually call `window.open` before your `async` function and use the\r\n     * window reference in your own custom `urlCallback` (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061).\r\n     * For example:\r\n     * ```js\r\n     * <button id=\"btn\">Login with Gitlab</button>\r\n     * ...\r\n     * document.getElementById(\"btn\").addEventListener(\"click\", () => {\r\n     *     pb.collection(\"users\").authWithOAuth2({\r\n     *         provider: \"gitlab\",\r\n     *     }).then((authData) => {\r\n     *         console.log(authData)\r\n     *     }).catch((err) => {\r\n     *         console.log(err, err.originalError);\r\n     *     });\r\n     * })\r\n     * ```\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async authWithOAuth2<T = M>(\r\n        options: OAuth2AuthConfig,\r\n    ): Promise<RecordAuthResponse<T>>;\r\n\r\n    authWithOAuth2<T = M>(...args: any): Promise<RecordAuthResponse<T>> {\r\n        // fallback to legacy format\r\n        if (args.length > 1 || typeof args?.[0] === \"string\") {\r\n            console.warn(\r\n                \"PocketBase: This form of authWithOAuth2() is deprecated and may get removed in the future. Please replace with authWithOAuth2Code() OR use the authWithOAuth2() realtime form as shown in https://pocketbase.io/docs/authentication/#oauth2-integration.\",\r\n            );\r\n            return this.authWithOAuth2Code<T>(\r\n                args?.[0] || \"\",\r\n                args?.[1] || \"\",\r\n                args?.[2] || \"\",\r\n                args?.[3] || \"\",\r\n                args?.[4] || {},\r\n                args?.[5] || {},\r\n                args?.[6] || {},\r\n            );\r\n        }\r\n\r\n        const config = args?.[0] || {};\r\n\r\n        // open a new popup window in case config.urlCallback is not set\r\n        //\r\n        // note: it is opened before any async calls due to Safari restrictions\r\n        // (see https://github.com/pocketbase/pocketbase/discussions/2429#discussioncomment-5943061)\r\n        let eagerDefaultPopup: Window | null = null;\r\n        if (!config.urlCallback) {\r\n            eagerDefaultPopup = openBrowserPopup(undefined);\r\n        }\r\n\r\n        // initialize a one-off realtime service\r\n        const realtime = new RealtimeService(this.client);\r\n\r\n        function cleanup() {\r\n            eagerDefaultPopup?.close();\r\n            realtime.unsubscribe();\r\n        }\r\n\r\n        const requestKeyOptions: SendOptions = {};\r\n        const requestKey = config.requestKey;\r\n        if (requestKey) {\r\n            requestKeyOptions.requestKey = requestKey;\r\n        }\r\n\r\n        return this.listAuthMethods(requestKeyOptions)\r\n            .then((authMethods) => {\r\n                const provider = authMethods.oauth2.providers.find(\r\n                    (p) => p.name === config.provider,\r\n                );\r\n                if (!provider) {\r\n                    throw new ClientResponseError(\r\n                        new Error(`Missing or invalid provider \"${config.provider}\".`),\r\n                    );\r\n                }\r\n\r\n                const redirectURL = this.client.buildURL(\"/api/oauth2-redirect\");\r\n\r\n                // find the AbortController associated with the current request key (if any)\r\n                const cancelController = requestKey\r\n                    ? this.client[\"cancelControllers\"]?.[requestKey]\r\n                    : undefined;\r\n                if (cancelController) {\r\n                    cancelController.signal.onabort = () => {\r\n                        cleanup();\r\n                    };\r\n                }\r\n\r\n                return new Promise(async (resolve, reject) => {\r\n                    try {\r\n                        await realtime.subscribe(\"@oauth2\", async (e) => {\r\n                            const oldState = realtime.clientId;\r\n\r\n                            try {\r\n                                if (!e.state || oldState !== e.state) {\r\n                                    throw new Error(\"State parameters don't match.\");\r\n                                }\r\n\r\n                                if (e.error || !e.code) {\r\n                                    throw new Error(\r\n                                        \"OAuth2 redirect error or missing code: \" +\r\n                                            e.error,\r\n                                    );\r\n                                }\r\n\r\n                                // clear the non SendOptions props\r\n                                const options = Object.assign({}, config);\r\n                                delete options.provider;\r\n                                delete options.scopes;\r\n                                delete options.createData;\r\n                                delete options.urlCallback;\r\n\r\n                                // reset the cancelController listener as it will be triggered by the next api call\r\n                                if (cancelController?.signal?.onabort) {\r\n                                    cancelController.signal.onabort = null;\r\n                                }\r\n\r\n                                const authData = await this.authWithOAuth2Code<T>(\r\n                                    provider.name,\r\n                                    e.code,\r\n                                    provider.codeVerifier,\r\n                                    redirectURL,\r\n                                    config.createData,\r\n                                    options,\r\n                                );\r\n\r\n                                resolve(authData);\r\n                            } catch (err) {\r\n                                reject(new ClientResponseError(err));\r\n                            }\r\n\r\n                            cleanup();\r\n                        });\r\n\r\n                        const replacements: { [key: string]: any } = {\r\n                            state: realtime.clientId,\r\n                        };\r\n                        if (config.scopes?.length) {\r\n                            replacements[\"scope\"] = config.scopes.join(\" \");\r\n                        }\r\n\r\n                        Object.keys(config.params || {}).forEach((key) => {\r\n                            replacements[key] = config.params[key];\r\n                        });\r\n\r\n                        const url = this._replaceQueryParams(\r\n                            provider.authURL + redirectURL,\r\n                            replacements,\r\n                        );\r\n\r\n                        let urlCallback =\r\n                            config.urlCallback ||\r\n                            function (url: string) {\r\n                                if (eagerDefaultPopup) {\r\n                                    eagerDefaultPopup.location.href = url;\r\n                                } else {\r\n                                    // it could have been blocked due to its empty initial url,\r\n                                    // try again...\r\n                                    eagerDefaultPopup = openBrowserPopup(url);\r\n                                }\r\n                            };\r\n\r\n                        await urlCallback(url);\r\n                    } catch (err) {\r\n                        cleanup();\r\n                        reject(new ClientResponseError(err));\r\n                    }\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                cleanup();\r\n                throw err; // rethrow\r\n            }) as Promise<RecordAuthResponse<T>>;\r\n    }\r\n\r\n    /**\r\n     * Refreshes the current authenticated record instance and\r\n     * returns a new token and record data.\r\n     *\r\n     * On success this method also automatically updates the client's AuthStore.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async authRefresh<T = M>(options?: RecordOptions): Promise<RecordAuthResponse<T>>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using authRefresh(options?).\r\n     */\r\n    async authRefresh<T = M>(body?: any, query?: any): Promise<RecordAuthResponse<T>>;\r\n\r\n    async authRefresh<T = M>(\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<RecordAuthResponse<T>> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of authRefresh(body?, query?) is deprecated. Consider replacing it with authRefresh(options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/auth-refresh\", options)\r\n            .then((data) => this.authResponse<T>(data));\r\n    }\r\n\r\n    /**\r\n     * Sends auth record password reset request.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async requestPasswordReset(email: string, options?: CommonOptions): Promise<boolean>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using requestPasswordReset(email, options?).\r\n     */\r\n    async requestPasswordReset(email: string, body?: any, query?: any): Promise<boolean>;\r\n\r\n    async requestPasswordReset(\r\n        email: string,\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<boolean> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n            body: {\r\n                email: email,\r\n            },\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of requestPasswordReset(email, body?, query?) is deprecated. Consider replacing it with requestPasswordReset(email, options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/request-password-reset\", options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Confirms auth record password reset request.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async confirmPasswordReset(\r\n        passwordResetToken: string,\r\n        password: string,\r\n        passwordConfirm: string,\r\n        options?: CommonOptions,\r\n    ): Promise<boolean>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using confirmPasswordReset(passwordResetToken, password, passwordConfirm, options?).\r\n     */\r\n    async confirmPasswordReset(\r\n        passwordResetToken: string,\r\n        password: string,\r\n        passwordConfirm: string,\r\n        body?: any,\r\n        query?: any,\r\n    ): Promise<boolean>;\r\n\r\n    async confirmPasswordReset(\r\n        passwordResetToken: string,\r\n        password: string,\r\n        passwordConfirm: string,\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<boolean> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n            body: {\r\n                token: passwordResetToken,\r\n                password: password,\r\n                passwordConfirm: passwordConfirm,\r\n            },\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of confirmPasswordReset(token, password, passwordConfirm, body?, query?) is deprecated. Consider replacing it with confirmPasswordReset(token, password, passwordConfirm, options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/confirm-password-reset\", options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Sends auth record verification email request.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async requestVerification(email: string, options?: CommonOptions): Promise<boolean>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using requestVerification(email, options?).\r\n     */\r\n    async requestVerification(email: string, body?: any, query?: any): Promise<boolean>;\r\n\r\n    async requestVerification(\r\n        email: string,\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<boolean> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n            body: {\r\n                email: email,\r\n            },\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of requestVerification(email, body?, query?) is deprecated. Consider replacing it with requestVerification(email, options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/request-verification\", options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Confirms auth record email verification request.\r\n     *\r\n     * If the current `client.authStore.record` matches with the auth record from the token,\r\n     * then on success the `client.authStore.record.verified` will be updated to `true`.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async confirmVerification(\r\n        verificationToken: string,\r\n        options?: CommonOptions,\r\n    ): Promise<boolean>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using confirmVerification(verificationToken, options?).\r\n     */\r\n    async confirmVerification(\r\n        verificationToken: string,\r\n        body?: any,\r\n        query?: any,\r\n    ): Promise<boolean>;\r\n\r\n    async confirmVerification(\r\n        verificationToken: string,\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<boolean> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n            body: {\r\n                token: verificationToken,\r\n            },\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of confirmVerification(token, body?, query?) is deprecated. Consider replacing it with confirmVerification(token, options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/confirm-verification\", options)\r\n            .then(() => {\r\n                // on success manually update the current auth record verified state\r\n                const payload = getTokenPayload(verificationToken);\r\n                const model = this.client.authStore.record;\r\n                if (\r\n                    model &&\r\n                    !model.verified &&\r\n                    model.id === payload.id &&\r\n                    model.collectionId === payload.collectionId\r\n                ) {\r\n                    model.verified = true;\r\n                    this.client.authStore.save(this.client.authStore.token, model);\r\n                }\r\n\r\n                return true;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends an email change request to the authenticated record model.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async requestEmailChange(newEmail: string, options?: CommonOptions): Promise<boolean>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using requestEmailChange(newEmail, options?).\r\n     */\r\n    async requestEmailChange(newEmail: string, body?: any, query?: any): Promise<boolean>;\r\n\r\n    async requestEmailChange(\r\n        newEmail: string,\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<boolean> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n            body: {\r\n                newEmail: newEmail,\r\n            },\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of requestEmailChange(newEmail, body?, query?) is deprecated. Consider replacing it with requestEmailChange(newEmail, options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/request-email-change\", options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Confirms auth record's new email address.\r\n     *\r\n     * If the current `client.authStore.record` matches with the auth record from the token,\r\n     * then on success the `client.authStore` will be cleared.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async confirmEmailChange(\r\n        emailChangeToken: string,\r\n        password: string,\r\n        options?: CommonOptions,\r\n    ): Promise<boolean>;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Consider using confirmEmailChange(emailChangeToken, password, options?).\r\n     */\r\n    async confirmEmailChange(\r\n        emailChangeToken: string,\r\n        password: string,\r\n        body?: any,\r\n        query?: any,\r\n    ): Promise<boolean>;\r\n\r\n    async confirmEmailChange(\r\n        emailChangeToken: string,\r\n        password: string,\r\n        bodyOrOptions?: any,\r\n        query?: any,\r\n    ): Promise<boolean> {\r\n        let options: any = {\r\n            method: \"POST\",\r\n            body: {\r\n                token: emailChangeToken,\r\n                password: password,\r\n            },\r\n        };\r\n\r\n        options = normalizeLegacyOptionsArgs(\r\n            \"This form of confirmEmailChange(token, password, body?, query?) is deprecated. Consider replacing it with confirmEmailChange(token, password, options?).\",\r\n            options,\r\n            bodyOrOptions,\r\n            query,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/confirm-email-change\", options)\r\n            .then(() => {\r\n                const payload = getTokenPayload(emailChangeToken);\r\n                const model = this.client.authStore.record;\r\n                if (\r\n                    model &&\r\n                    model.id === payload.id &&\r\n                    model.collectionId === payload.collectionId\r\n                ) {\r\n                    this.client.authStore.clear();\r\n                }\r\n\r\n                return true;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @deprecated use collection(\"_externalAuths\").*\r\n     *\r\n     * Lists all linked external auth providers for the specified auth record.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async listExternalAuths(\r\n        recordId: string,\r\n        options?: CommonOptions,\r\n    ): Promise<Array<RecordModel>> {\r\n        return this.client.collection(\"_externalAuths\").getFullList(\r\n            Object.assign({}, options, {\r\n                filter: this.client.filter(\"recordRef = {:id}\", { id: recordId }),\r\n            }),\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @deprecated use collection(\"_externalAuths\").*\r\n     *\r\n     * Unlink a single external auth provider from the specified auth record.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async unlinkExternalAuth(\r\n        recordId: string,\r\n        provider: string,\r\n        options?: CommonOptions,\r\n    ): Promise<boolean> {\r\n        const ea = await this.client.collection(\"_externalAuths\").getFirstListItem(\r\n            this.client.filter(\"recordRef = {:recordId} && provider = {:provider}\", {\r\n                recordId,\r\n                provider,\r\n            }),\r\n        );\r\n\r\n        return this.client\r\n            .collection(\"_externalAuths\")\r\n            .delete(ea.id, options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Sends auth record OTP to the provided email.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async requestOTP(email: string, options?: CommonOptions): Promise<OTPResponse> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: { email: email },\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(this.baseCollectionPath + \"/request-otp\", options);\r\n    }\r\n\r\n    /**\r\n     * Authenticate a single auth collection record via OTP.\r\n     *\r\n     * On success, this method also automatically updates\r\n     * the client's AuthStore data and returns:\r\n     * - the authentication token\r\n     * - the authenticated record model\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async authWithOTP<T = M>(\r\n        otpId: string,\r\n        password: string,\r\n        options?: CommonOptions,\r\n    ): Promise<RecordAuthResponse<T>> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: { otpId, password },\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(this.baseCollectionPath + \"/auth-with-otp\", options)\r\n            .then((data) => this.authResponse<T>(data));\r\n    }\r\n\r\n    /**\r\n     * Impersonate authenticates with the specified recordId and\r\n     * returns a new client with the received auth token in a memory store.\r\n     *\r\n     * If `duration` is 0 the generated auth token will fallback\r\n     * to the default collection auth token duration.\r\n     *\r\n     * This action currently requires superusers privileges.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async impersonate(\r\n        recordId: string,\r\n        duration: number,\r\n        options?: CommonOptions,\r\n    ): Promise<Client> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: { duration: duration },\r\n            },\r\n            options,\r\n        );\r\n        options.headers = options.headers || {};\r\n        if (!options.headers.Authorization) {\r\n            options.headers.Authorization = this.client.authStore.token;\r\n        }\r\n\r\n        // create a new client loaded with the impersonated auth state\r\n        // ---\r\n        const client = new Client(\r\n            this.client.baseURL,\r\n            new BaseAuthStore(),\r\n            this.client.lang,\r\n        );\r\n\r\n        const authData = await client.send(\r\n            this.baseCollectionPath + \"/impersonate/\" + encodeURIComponent(recordId),\r\n            options,\r\n        );\r\n\r\n        client.authStore.save(authData?.token, this.decode(authData?.record || {}));\r\n        // ---\r\n\r\n        return client;\r\n    }\r\n\r\n    // ---------------------------------------------------------------\r\n\r\n    // very rudimentary url query params replacement because at the moment\r\n    // URL (and URLSearchParams) doesn't seem to be fully supported in React Native\r\n    //\r\n    // note: for details behind some of the decode/encode parsing check https://unixpapa.com/js/querystring.html\r\n    private _replaceQueryParams(\r\n        url: string,\r\n        replacements: { [key: string]: any } = {},\r\n    ): string {\r\n        let urlPath = url;\r\n        let query = \"\";\r\n\r\n        const queryIndex = url.indexOf(\"?\");\r\n        if (queryIndex >= 0) {\r\n            urlPath = url.substring(0, url.indexOf(\"?\"));\r\n            query = url.substring(url.indexOf(\"?\") + 1);\r\n        }\r\n\r\n        const parsedParams: { [key: string]: string } = {};\r\n\r\n        // parse the query parameters\r\n        const rawParams = query.split(\"&\");\r\n        for (const param of rawParams) {\r\n            if (param == \"\") {\r\n                continue;\r\n            }\r\n\r\n            const pair = param.split(\"=\");\r\n            parsedParams[decodeURIComponent(pair[0].replace(/\\+/g, \" \"))] =\r\n                decodeURIComponent((pair[1] || \"\").replace(/\\+/g, \" \"));\r\n        }\r\n\r\n        // apply the replacements\r\n        for (let key in replacements) {\r\n            if (!replacements.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            if (replacements[key] == null) {\r\n                delete parsedParams[key];\r\n            } else {\r\n                parsedParams[key] = replacements[key];\r\n            }\r\n        }\r\n\r\n        // construct back the full query string\r\n        query = \"\";\r\n        for (let key in parsedParams) {\r\n            if (!parsedParams.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            if (query != \"\") {\r\n                query += \"&\";\r\n            }\r\n\r\n            query +=\r\n                encodeURIComponent(key.replace(/%20/g, \"+\")) +\r\n                \"=\" +\r\n                encodeURIComponent(parsedParams[key].replace(/%20/g, \"+\"));\r\n        }\r\n\r\n        return query != \"\" ? urlPath + \"?\" + query : urlPath;\r\n    }\r\n}\r\n\r\nfunction openBrowserPopup(url?: string): Window | null {\r\n    if (typeof window === \"undefined\" || !window?.open) {\r\n        throw new ClientResponseError(\r\n            new Error(\r\n                `Not in a browser context - please pass a custom urlCallback function.`,\r\n            ),\r\n        );\r\n    }\r\n\r\n    let width = 1024;\r\n    let height = 768;\r\n\r\n    let windowWidth = window.innerWidth;\r\n    let windowHeight = window.innerHeight;\r\n\r\n    // normalize window size\r\n    width = width > windowWidth ? windowWidth : width;\r\n    height = height > windowHeight ? windowHeight : height;\r\n\r\n    let left = windowWidth / 2 - width / 2;\r\n    let top = windowHeight / 2 - height / 2;\r\n\r\n    // note: we don't use the noopener and noreferrer attributes since\r\n    // for some reason browser blocks such windows then url is undefined/blank\r\n    return window.open(\r\n        url,\r\n        \"popup_window\",\r\n        \"width=\" +\r\n            width +\r\n            \",height=\" +\r\n            height +\r\n            \",top=\" +\r\n            top +\r\n            \",left=\" +\r\n            left +\r\n            \",resizable,menubar=no\",\r\n    );\r\n}\r\n","import { CrudService } from \"@/services/CrudService\";\r\nimport { CollectionModel } from \"@/tools/dtos\";\r\nimport { CommonOptions } from \"@/tools/options\";\r\n\r\nexport class CollectionService extends CrudService<CollectionModel> {\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    get baseCrudPath(): string {\r\n        return \"/api/collections\";\r\n    }\r\n\r\n    /**\r\n     * Imports the provided collections.\r\n     *\r\n     * If `deleteMissing` is `true`, all local collections and their fields,\r\n     * that are not present in the imported configuration, WILL BE DELETED\r\n     * (including their related records data)!\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async import(\r\n        collections: Array<CollectionModel>,\r\n        deleteMissing: boolean = false,\r\n        options?: CommonOptions,\r\n    ): Promise<true> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"PUT\",\r\n                body: {\r\n                    collections: collections,\r\n                    deleteMissing: deleteMissing,\r\n                },\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(this.baseCrudPath + \"/import\", options).then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Returns type indexed map with scaffolded collection models\r\n     * populated with their default field values.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getScaffolds(\r\n        options?: CommonOptions,\r\n    ): Promise<{ [key: string]: CollectionModel }> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(this.baseCrudPath + \"/meta/scaffolds\", options);\r\n    }\r\n\r\n    /**\r\n     * Deletes all records associated with the specified collection.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async truncate(collectionIdOrName: string, options?: CommonOptions): Promise<true> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"DELETE\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(\r\n                this.baseCrudPath +\r\n                    \"/\" +\r\n                    encodeURIComponent(collectionIdOrName) +\r\n                    \"/truncate\",\r\n                options,\r\n            )\r\n            .then(() => true);\r\n    }\r\n}\r\n","import { ClientResponseError } from \"@/ClientResponseError\";\r\nimport { BaseService } from \"@/services/BaseService\";\r\nimport { ListResult, LogModel } from \"@/tools/dtos\";\r\nimport { CommonOptions, ListOptions, LogStatsOptions } from \"@/tools/options\";\r\n\r\nexport interface HourlyStats {\r\n    total: number;\r\n    date: string;\r\n}\r\n\r\nexport class LogService extends BaseService {\r\n    /**\r\n     * Returns paginated logs list.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getList(\r\n        page = 1,\r\n        perPage = 30,\r\n        options?: ListOptions,\r\n    ): Promise<ListResult<LogModel>> {\r\n        options = Object.assign({ method: \"GET\" }, options);\r\n\r\n        options.query = Object.assign(\r\n            {\r\n                page: page,\r\n                perPage: perPage,\r\n            },\r\n            options.query,\r\n        );\r\n\r\n        return this.client.send(\"/api/logs\", options);\r\n    }\r\n\r\n    /**\r\n     * Returns a single log by its id.\r\n     *\r\n     * If `id` is empty it will throw a 404 error.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getOne(id: string, options?: CommonOptions): Promise<LogModel> {\r\n        if (!id) {\r\n            throw new ClientResponseError({\r\n                url: this.client.buildURL(\"/api/logs/\"),\r\n                status: 404,\r\n                response: {\r\n                    code: 404,\r\n                    message: \"Missing required log id.\",\r\n                    data: {},\r\n                },\r\n            });\r\n        }\r\n\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/logs/\" + encodeURIComponent(id), options);\r\n    }\r\n\r\n    /**\r\n     * Returns logs statistics.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getStats(options?: LogStatsOptions): Promise<Array<HourlyStats>> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/logs/stats\", options);\r\n    }\r\n}\r\n","import { BaseService } from \"@/services/BaseService\";\r\nimport { CommonOptions } from \"@/tools/options\";\r\n\r\nexport interface HealthCheckResponse {\r\n    code: number;\r\n    message: string;\r\n    data: { [key: string]: any };\r\n}\r\n\r\nexport class HealthService extends BaseService {\r\n    /**\r\n     * Checks the health status of the api.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async check(options?: CommonOptions): Promise<HealthCheckResponse> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/health\", options);\r\n    }\r\n}\r\n","import { BaseService } from \"@/services/BaseService\";\r\nimport { CommonOptions, FileOptions } from \"@/tools/options\";\r\n\r\nexport class FileService extends BaseService {\r\n    /**\r\n     * @deprecated Please replace with `pb.files.getURL()`.\r\n     */\r\n    getUrl(\r\n        record: { [key: string]: any },\r\n        filename: string,\r\n        queryParams: FileOptions = {},\r\n    ): string {\r\n        console.warn(\"Please replace pb.files.getUrl() with pb.files.getURL()\");\r\n        return this.getURL(record, filename, queryParams);\r\n    }\r\n\r\n    /**\r\n     * Builds and returns an absolute record file url for the provided filename.\r\n     */\r\n    getURL(\r\n        record: { [key: string]: any },\r\n        filename: string,\r\n        queryParams: FileOptions = {},\r\n    ): string {\r\n        if (\r\n            !filename ||\r\n            !record?.id ||\r\n            !(record?.collectionId || record?.collectionName)\r\n        ) {\r\n            return \"\";\r\n        }\r\n\r\n        const parts = [];\r\n        parts.push(\"api\");\r\n        parts.push(\"files\");\r\n        parts.push(encodeURIComponent(record.collectionId || record.collectionName));\r\n        parts.push(encodeURIComponent(record.id));\r\n        parts.push(encodeURIComponent(filename));\r\n\r\n        let result = this.client.buildURL(parts.join(\"/\"));\r\n\r\n        if (Object.keys(queryParams).length) {\r\n            // normalize the download query param for consistency with the Dart sdk\r\n            if (queryParams.download === false) {\r\n                delete queryParams.download;\r\n            }\r\n\r\n            const params = new URLSearchParams(queryParams);\r\n\r\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Requests a new private file access token for the current auth model.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getToken(options?: CommonOptions): Promise<string> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(\"/api/files/token\", options)\r\n            .then((data) => data?.token || \"\");\r\n    }\r\n}\r\n","import { BaseService } from \"@/services/BaseService\";\r\nimport { CommonOptions } from \"@/tools/options\";\r\n\r\nexport interface BackupFileInfo {\r\n    key: string;\r\n    size: number;\r\n    modified: string;\r\n}\r\n\r\nexport class BackupService extends BaseService {\r\n    /**\r\n     * Returns list with all available backup files.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getFullList(options?: CommonOptions): Promise<Array<BackupFileInfo>> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/backups\", options);\r\n    }\r\n\r\n    /**\r\n     * Initializes a new backup.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async create(basename: string, options?: CommonOptions): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: {\r\n                    name: basename,\r\n                },\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/backups\", options).then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Uploads an existing backup file.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```js\r\n     * await pb.backups.upload({\r\n     *     file: new Blob([...]),\r\n     * });\r\n     * ```\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async upload(\r\n        bodyParams: { [key: string]: any } | FormData,\r\n        options?: CommonOptions,\r\n    ): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: bodyParams,\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/backups/upload\", options).then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Deletes a single backup file.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async delete(key: string, options?: CommonOptions): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"DELETE\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(`/api/backups/${encodeURIComponent(key)}`, options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * Initializes an app data restore from an existing backup.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async restore(key: string, options?: CommonOptions): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(`/api/backups/${encodeURIComponent(key)}/restore`, options)\r\n            .then(() => true);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Please use `getDownloadURL()`.\r\n     */\r\n    getDownloadUrl(token: string, key: string): string {\r\n        console.warn(\r\n            \"Please replace pb.backups.getDownloadUrl() with pb.backups.getDownloadURL()\",\r\n        );\r\n        return this.getDownloadURL(token, key);\r\n    }\r\n\r\n    /**\r\n     * Builds a download url for a single existing backup using a\r\n     * superuser file token and the backup file key.\r\n     *\r\n     * The file token can be generated via `pb.files.getToken()`.\r\n     */\r\n    getDownloadURL(token: string, key: string): string {\r\n        return this.client.buildURL(\r\n            `/api/backups/${encodeURIComponent(key)}?token=${encodeURIComponent(token)}`,\r\n        );\r\n    }\r\n}\r\n","import { BaseService } from \"@/services/BaseService\";\r\nimport { CommonOptions } from \"@/tools/options\";\r\n\r\nexport interface CronJob {\r\n    id: string;\r\n    expression: string;\r\n}\r\n\r\nexport class CronService extends BaseService {\r\n    /**\r\n     * Returns list with all registered cron jobs.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async getFullList(options?: CommonOptions): Promise<Array<CronJob>> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"GET\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/crons\", options);\r\n    }\r\n\r\n    /**\r\n     * Runs the specified cron job.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async run(jobId: string, options?: CommonOptions): Promise<boolean> {\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client\r\n            .send(`/api/crons/${encodeURIComponent(jobId)}`, options)\r\n            .then(() => true);\r\n    }\r\n}\r\n","/**\r\n * Checks if the specified value is a file (aka. File, Blob, RN file object).\r\n */\r\nexport function isFile(val: any): boolean {\r\n    return (\r\n        (typeof Blob !== \"undefined\" && val instanceof Blob) ||\r\n        (typeof File !== \"undefined\" && val instanceof File) ||\r\n        // check for React Native file object format\r\n        // (see https://github.com/pocketbase/pocketbase/discussions/2002#discussioncomment-5254168)\r\n        (val !== null &&\r\n            typeof val === \"object\" &&\r\n            val.uri &&\r\n            ((typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") ||\r\n                (typeof global !== \"undefined\" && (global as any).HermesInternal)))\r\n    );\r\n}\r\n\r\n/**\r\n * Loosely checks if the specified body is a FormData instance.\r\n */\r\nexport function isFormData(body: any): boolean {\r\n    return (\r\n        body &&\r\n        // we are checking the constructor name because FormData\r\n        // is not available natively in some environments and the\r\n        // polyfill(s) may not be globally accessible\r\n        (body.constructor?.name === \"FormData\" ||\r\n            // fallback to global FormData instance check\r\n            // note: this is needed because the constructor.name could be different in case of\r\n            //       custom global FormData implementation, eg. React Native on Android/iOS\r\n            (typeof FormData !== \"undefined\" && body instanceof FormData))\r\n    );\r\n}\r\n\r\n/**\r\n * Checks if the submitted body object has at least one Blob/File field value.\r\n */\r\nexport function hasFileField(body: { [key: string]: any }): boolean {\r\n    for (const key in body) {\r\n        const values = Array.isArray(body[key]) ? body[key] : [body[key]];\r\n        for (const v of values) {\r\n            if (isFile(v)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Converts analyzes the provided body and converts it to FormData\r\n * in case a plain object with File/Blob values is used.\r\n */\r\nexport function convertToFormDataIfNeeded(body: any): any {\r\n    if (\r\n        typeof FormData === \"undefined\" ||\r\n        typeof body === \"undefined\" ||\r\n        typeof body !== \"object\" ||\r\n        body === null ||\r\n        isFormData(body) ||\r\n        !hasFileField(body)\r\n    ) {\r\n        return body;\r\n    }\r\n\r\n    const form = new FormData();\r\n\r\n    for (const key in body) {\r\n        const val = body[key];\r\n\r\n        // skip undefined values for consistency with JSON.stringify\r\n        // (see https://github.com/pocketbase/pocketbase/issues/6731#issuecomment-2812382827)\r\n        if (typeof val === \"undefined\") {\r\n            continue;\r\n        }\r\n\r\n        if (typeof val === \"object\" && !hasFileField({ data: val })) {\r\n            // send json-like values as jsonPayload to avoid the implicit string value normalization\r\n            let payload: { [key: string]: any } = {};\r\n            payload[key] = val;\r\n            form.append(\"@jsonPayload\", JSON.stringify(payload));\r\n        } else {\r\n            // in case of mixed string and file/blob\r\n            const normalizedVal = Array.isArray(val) ? val : [val];\r\n            for (let v of normalizedVal) {\r\n                form.append(key, v);\r\n            }\r\n        }\r\n    }\r\n\r\n    return form;\r\n}\r\n\r\n/**\r\n * Converts the provided FormData instance into a plain object.\r\n *\r\n * For consistency with the server multipart/form-data inferring,\r\n * the following normalization rules are applied for plain multipart string values:\r\n *   - \"true\" is converted to the json \"true\"\r\n *   - \"false\" is converted to the json \"false\"\r\n *   - numeric strings are converted to json number ONLY if the resulted\r\n *     minimal number string representation is the same as the provided raw string\r\n *     (aka. scientific notations, \"Infinity\", \"0.0\", \"0001\", etc. are kept as string)\r\n *   - any other string (empty string too) is left as it is\r\n */\r\nexport function convertFormDataToObject(formData: FormData): { [key: string]: any } {\r\n    let result: { [key: string]: any } = {};\r\n\r\n    formData.forEach((v, k) => {\r\n        if (k === \"@jsonPayload\" && typeof v == \"string\") {\r\n            try {\r\n                let parsed = JSON.parse(v);\r\n                Object.assign(result, parsed);\r\n            } catch (err) {\r\n                console.warn(\"@jsonPayload error:\", err);\r\n            }\r\n        } else {\r\n            if (typeof result[k] !== \"undefined\") {\r\n                if (!Array.isArray(result[k])) {\r\n                    result[k] = [result[k]];\r\n                }\r\n                result[k].push(inferFormDataValue(v));\r\n            } else {\r\n                result[k] = inferFormDataValue(v);\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nconst inferNumberCharsRegex = /^[\\-\\.\\d]+$/;\r\n\r\nfunction inferFormDataValue(value: any): any {\r\n    if (typeof value != \"string\") {\r\n        return value;\r\n    }\r\n\r\n    if (value == \"true\") {\r\n        return true;\r\n    }\r\n\r\n    if (value == \"false\") {\r\n        return false;\r\n    }\r\n\r\n    // note: expects the provided raw string to match exactly with the minimal string representation of the parsed number\r\n    if (\r\n        (value[0] === \"-\" || (value[0] >= \"0\" && value[0] <= \"9\")) &&\r\n        inferNumberCharsRegex.test(value)\r\n    ) {\r\n        let num = +value;\r\n        if (\"\" + num === value) {\r\n            return num;\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n","import { BaseService } from \"@/services/BaseService\";\r\nimport { isFile, isFormData, convertFormDataToObject } from \"@/tools/formdata\";\r\nimport {\r\n    SendOptions,\r\n    RecordOptions,\r\n    normalizeUnknownQueryParams,\r\n    serializeQueryParams,\r\n} from \"@/tools/options\";\r\n\r\nexport interface BatchRequest {\r\n    method: string;\r\n    url: string;\r\n    json?: { [key: string]: any };\r\n    files?: { [key: string]: Array<any> };\r\n    headers?: { [key: string]: string };\r\n}\r\n\r\nexport interface BatchRequestResult {\r\n    status: number;\r\n    body: any;\r\n}\r\n\r\nexport class BatchService extends BaseService {\r\n    private requests: Array<BatchRequest> = [];\r\n    private subs: { [key: string]: SubBatchService } = {};\r\n\r\n    /**\r\n     * Starts constructing a batch request entry for the specified collection.\r\n     */\r\n    collection(collectionIdOrName: string): SubBatchService {\r\n        if (!this.subs[collectionIdOrName]) {\r\n            this.subs[collectionIdOrName] = new SubBatchService(\r\n                this.requests,\r\n                collectionIdOrName,\r\n            );\r\n        }\r\n\r\n        return this.subs[collectionIdOrName];\r\n    }\r\n\r\n    /**\r\n     * Sends the batch requests.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async send(options?: SendOptions): Promise<Array<BatchRequestResult>> {\r\n        const formData = new FormData();\r\n\r\n        const jsonData = [];\r\n\r\n        for (let i = 0; i < this.requests.length; i++) {\r\n            const req = this.requests[i];\r\n\r\n            jsonData.push({\r\n                method: req.method,\r\n                url: req.url,\r\n                headers: req.headers,\r\n                body: req.json,\r\n            });\r\n\r\n            if (req.files) {\r\n                for (let key in req.files) {\r\n                    const files = req.files[key] || [];\r\n                    for (let file of files) {\r\n                        formData.append(\"requests.\" + i + \".\" + key, file);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        formData.append(\"@jsonPayload\", JSON.stringify({ requests: jsonData }));\r\n\r\n        options = Object.assign(\r\n            {\r\n                method: \"POST\",\r\n                body: formData,\r\n            },\r\n            options,\r\n        );\r\n\r\n        return this.client.send(\"/api/batch\", options);\r\n    }\r\n}\r\n\r\nexport class SubBatchService {\r\n    private requests: Array<BatchRequest> = [];\r\n    private readonly collectionIdOrName: string;\r\n\r\n    constructor(requests: Array<BatchRequest>, collectionIdOrName: string) {\r\n        this.requests = requests;\r\n        this.collectionIdOrName = collectionIdOrName;\r\n    }\r\n\r\n    /**\r\n     * Registers a record upsert request into the current batch queue.\r\n     *\r\n     * The request will be executed as update if `bodyParams` have a valid existing record `id` value, otherwise - create.\r\n     */\r\n    upsert(\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: RecordOptions,\r\n    ): void {\r\n        options = Object.assign(\r\n            {\r\n                body: bodyParams || {},\r\n            },\r\n            options,\r\n        );\r\n\r\n        const request: BatchRequest = {\r\n            method: \"PUT\",\r\n            url:\r\n                \"/api/collections/\" +\r\n                encodeURIComponent(this.collectionIdOrName) +\r\n                \"/records\",\r\n        };\r\n\r\n        this.prepareRequest(request, options);\r\n\r\n        this.requests.push(request);\r\n    }\r\n\r\n    /**\r\n     * Registers a record create request into the current batch queue.\r\n     */\r\n    create(\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: RecordOptions,\r\n    ): void {\r\n        options = Object.assign(\r\n            {\r\n                body: bodyParams || {},\r\n            },\r\n            options,\r\n        );\r\n\r\n        const request: BatchRequest = {\r\n            method: \"POST\",\r\n            url:\r\n                \"/api/collections/\" +\r\n                encodeURIComponent(this.collectionIdOrName) +\r\n                \"/records\",\r\n        };\r\n\r\n        this.prepareRequest(request, options);\r\n\r\n        this.requests.push(request);\r\n    }\r\n\r\n    /**\r\n     * Registers a record update request into the current batch queue.\r\n     */\r\n    update(\r\n        id: string,\r\n        bodyParams?: { [key: string]: any } | FormData,\r\n        options?: RecordOptions,\r\n    ): void {\r\n        options = Object.assign(\r\n            {\r\n                body: bodyParams || {},\r\n            },\r\n            options,\r\n        );\r\n\r\n        const request: BatchRequest = {\r\n            method: \"PATCH\",\r\n            url:\r\n                \"/api/collections/\" +\r\n                encodeURIComponent(this.collectionIdOrName) +\r\n                \"/records/\" +\r\n                encodeURIComponent(id),\r\n        };\r\n\r\n        this.prepareRequest(request, options);\r\n\r\n        this.requests.push(request);\r\n    }\r\n\r\n    /**\r\n     * Registers a record delete request into the current batch queue.\r\n     */\r\n    delete(id: string, options?: SendOptions): void {\r\n        options = Object.assign({}, options);\r\n\r\n        const request: BatchRequest = {\r\n            method: \"DELETE\",\r\n            url:\r\n                \"/api/collections/\" +\r\n                encodeURIComponent(this.collectionIdOrName) +\r\n                \"/records/\" +\r\n                encodeURIComponent(id),\r\n        };\r\n\r\n        this.prepareRequest(request, options);\r\n\r\n        this.requests.push(request);\r\n    }\r\n\r\n    private prepareRequest(request: BatchRequest, options: SendOptions) {\r\n        normalizeUnknownQueryParams(options);\r\n\r\n        request.headers = options.headers;\r\n        request.json = {};\r\n        request.files = {};\r\n\r\n        // serialize query parameters\r\n        // -----------------------------------------------------------\r\n        if (typeof options.query !== \"undefined\") {\r\n            const query = serializeQueryParams(options.query);\r\n            if (query) {\r\n                request.url += (request.url.includes(\"?\") ? \"&\" : \"?\") + query;\r\n            }\r\n        }\r\n\r\n        // extract json and files body data\r\n        // -----------------------------------------------------------\r\n        let body = options.body;\r\n        if (isFormData(body)) {\r\n            body = convertFormDataToObject(body);\r\n        }\r\n\r\n        for (const key in body) {\r\n            const val = body[key];\r\n\r\n            if (isFile(val)) {\r\n                request.files[key] = request.files[key] || [];\r\n                request.files[key].push(val);\r\n            } else if (Array.isArray(val)) {\r\n                const foundFiles = [];\r\n                const foundRegular = [];\r\n                for (const v of val) {\r\n                    if (isFile(v)) {\r\n                        foundFiles.push(v);\r\n                    } else {\r\n                        foundRegular.push(v);\r\n                    }\r\n                }\r\n\r\n                if (foundFiles.length > 0 && foundFiles.length == val.length) {\r\n                    // only files\r\n                    // ---\r\n                    request.files[key] = request.files[key] || [];\r\n                    for (let file of foundFiles) {\r\n                        request.files[key].push(file);\r\n                    }\r\n                } else {\r\n                    // empty or mixed array (both regular and File/Blob values)\r\n                    // ---\r\n                    request.json[key] = foundRegular;\r\n\r\n                    if (foundFiles.length > 0) {\r\n                        // add \"+\" to append if not already since otherwise\r\n                        // the existing regular files will be deleted\r\n                        // (the mixed values order is preserved only within their corresponding groups)\r\n                        let fileKey = key;\r\n                        if (!key.startsWith(\"+\") && !key.endsWith(\"+\")) {\r\n                            fileKey += \"+\";\r\n                        }\r\n\r\n                        request.files[fileKey] = request.files[fileKey] || [];\r\n                        for (let file of foundFiles) {\r\n                            request.files[fileKey].push(file);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                request.json[key] = val;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { ClientResponseError } from \"@/ClientResponseError\";\r\nimport { BaseAuthStore } from \"@/stores/BaseAuthStore\";\r\nimport { LocalAuthStore } from \"@/stores/LocalAuthStore\";\r\nimport { SettingsService } from \"@/services/SettingsService\";\r\nimport { RecordService } from \"@/services/RecordService\";\r\nimport { CollectionService } from \"@/services/CollectionService\";\r\nimport { LogService } from \"@/services/LogService\";\r\nimport { RealtimeService } from \"@/services/RealtimeService\";\r\nimport { HealthService } from \"@/services/HealthService\";\r\nimport { FileService } from \"@/services/FileService\";\r\nimport { BackupService } from \"@/services/BackupService\";\r\nimport { CronService } from \"@/services/CronService\";\r\nimport { BatchService } from \"@/services/BatchService\";\r\nimport { RecordModel } from \"@/tools/dtos\";\r\nimport {\r\n    SendOptions,\r\n    FileOptions,\r\n    normalizeUnknownQueryParams,\r\n    serializeQueryParams,\r\n} from \"@/tools/options\";\r\nimport { isFormData, convertToFormDataIfNeeded } from \"@/tools/formdata\";\r\n\r\nexport interface BeforeSendResult {\r\n    [key: string]: any; // for backward compatibility\r\n    url?: string;\r\n    options?: { [key: string]: any };\r\n}\r\n\r\n/**\r\n * PocketBase JS Client.\r\n */\r\nexport default class Client {\r\n    /**\r\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\r\n     */\r\n    baseURL: string;\r\n\r\n    /**\r\n     * Legacy getter alias for baseURL.\r\n     * @deprecated Please replace with baseURL.\r\n     */\r\n    get baseUrl(): string {\r\n        return this.baseURL;\r\n    }\r\n\r\n    /**\r\n     * Legacy setter alias for baseURL.\r\n     * @deprecated Please replace with baseURL.\r\n     */\r\n    set baseUrl(v: string) {\r\n        this.baseURL = v;\r\n    }\r\n\r\n    /**\r\n     * Hook that get triggered right before sending the fetch request,\r\n     * allowing you to inspect and modify the url and request options.\r\n     *\r\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\r\n     *\r\n     * You can return a non-empty result object `{ url, options }` to replace the url and request options entirely.\r\n     *\r\n     * Example:\r\n     * ```js\r\n     * const pb = new PocketBase(\"https://example.com\")\r\n     *\r\n     * pb.beforeSend = function (url, options) {\r\n     *     options.headers = Object.assign({}, options.headers, {\r\n     *         'X-Custom-Header': 'example',\r\n     *     })\r\n     *\r\n     *     return { url, options }\r\n     * }\r\n     *\r\n     * // use the created client as usual...\r\n     * ```\r\n     */\r\n    beforeSend?: (\r\n        url: string,\r\n        options: SendOptions,\r\n    ) => BeforeSendResult | Promise<BeforeSendResult>;\r\n\r\n    /**\r\n     * Hook that get triggered after successfully sending the fetch request,\r\n     * allowing you to inspect/modify the response object and its parsed data.\r\n     *\r\n     * Returns the new Promise resolved `data` that will be returned to the client.\r\n     *\r\n     * Example:\r\n     * ```js\r\n     * const pb = new PocketBase(\"https://example.com\")\r\n     *\r\n     * pb.afterSend = function (response, data, options) {\r\n     *     if (response.status != 200) {\r\n     *         throw new ClientResponseError({\r\n     *             url:      response.url,\r\n     *             status:   response.status,\r\n     *             response: { ... },\r\n     *         })\r\n     *     }\r\n     *\r\n     *     return data;\r\n     * }\r\n     *\r\n     * // use the created client as usual...\r\n     * ```\r\n     */\r\n    afterSend?: ((response: Response, data: any) => any) &\r\n        ((response: Response, data: any, options: SendOptions) => any);\r\n\r\n    /**\r\n     * Optional language code (default to `en-US`) that will be sent\r\n     * with the requests to the server as `Accept-Language` header.\r\n     */\r\n    lang: string;\r\n\r\n    /**\r\n     * A replaceable instance of the local auth store service.\r\n     */\r\n    authStore: BaseAuthStore;\r\n\r\n    /**\r\n     * An instance of the service that handles the **Settings APIs**.\r\n     */\r\n    readonly settings: SettingsService;\r\n\r\n    /**\r\n     * An instance of the service that handles the **Collection APIs**.\r\n     */\r\n    readonly collections: CollectionService;\r\n\r\n    /**\r\n     * An instance of the service that handles the **File APIs**.\r\n     */\r\n    readonly files: FileService;\r\n\r\n    /**\r\n     * An instance of the service that handles the **Log APIs**.\r\n     */\r\n    readonly logs: LogService;\r\n\r\n    /**\r\n     * An instance of the service that handles the **Realtime APIs**.\r\n     */\r\n    readonly realtime: RealtimeService;\r\n\r\n    /**\r\n     * An instance of the service that handles the **Health APIs**.\r\n     */\r\n    readonly health: HealthService;\r\n\r\n    /**\r\n     * An instance of the service that handles the **Backup APIs**.\r\n     */\r\n    readonly backups: BackupService;\r\n\r\n    /**\r\n     * An instance of the service that handles the **Cron APIs**.\r\n     */\r\n    readonly crons: CronService;\r\n\r\n    private cancelControllers: { [key: string]: AbortController } = {};\r\n    private recordServices: { [key: string]: RecordService } = {};\r\n    private enableAutoCancellation: boolean = true;\r\n\r\n    constructor(baseURL = \"/\", authStore?: BaseAuthStore | null, lang = \"en-US\") {\r\n        this.baseURL = baseURL;\r\n        this.lang = lang;\r\n\r\n        if (authStore) {\r\n            this.authStore = authStore;\r\n        } else if (typeof window != \"undefined\" && !!(window as any).Deno) {\r\n            // note: to avoid common security issues we fallback to runtime/memory store in case the code is running in Deno env\r\n            this.authStore = new BaseAuthStore();\r\n        } else {\r\n            this.authStore = new LocalAuthStore();\r\n        }\r\n\r\n        // common services\r\n        this.collections = new CollectionService(this);\r\n        this.files = new FileService(this);\r\n        this.logs = new LogService(this);\r\n        this.settings = new SettingsService(this);\r\n        this.realtime = new RealtimeService(this);\r\n        this.health = new HealthService(this);\r\n        this.backups = new BackupService(this);\r\n        this.crons = new CronService(this);\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     * With PocketBase v0.23.0 admins are converted to a regular auth\r\n     * collection named \"_superusers\", aka. you can use directly collection(\"_superusers\").\r\n     */\r\n    get admins(): RecordService {\r\n        return this.collection(\"_superusers\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new batch handler for sending multiple transactional\r\n     * create/update/upsert/delete collection requests in one network call.\r\n     *\r\n     * Example:\r\n     * ```js\r\n     * const batch = pb.createBatch();\r\n     *\r\n     * batch.collection(\"example1\").create({ ... })\r\n     * batch.collection(\"example2\").update(\"RECORD_ID\", { ... })\r\n     * batch.collection(\"example3\").delete(\"RECORD_ID\")\r\n     * batch.collection(\"example4\").upsert({ ... })\r\n     *\r\n     * await batch.send()\r\n     * ```\r\n     */\r\n    createBatch(): BatchService {\r\n        return new BatchService(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the RecordService associated to the specified collection.\r\n     */\r\n    collection<M = RecordModel>(idOrName: string): RecordService<M> {\r\n        if (!this.recordServices[idOrName]) {\r\n            this.recordServices[idOrName] = new RecordService(this, idOrName);\r\n        }\r\n\r\n        return this.recordServices[idOrName];\r\n    }\r\n\r\n    /**\r\n     * Globally enable or disable auto cancellation for pending duplicated requests.\r\n     */\r\n    autoCancellation(enable: boolean): Client {\r\n        this.enableAutoCancellation = !!enable;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels single request by its cancellation key.\r\n     */\r\n    cancelRequest(requestKey: string): Client {\r\n        if (this.cancelControllers[requestKey]) {\r\n            this.cancelControllers[requestKey].abort();\r\n            delete this.cancelControllers[requestKey];\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Cancels all pending requests.\r\n     */\r\n    cancelAllRequests(): Client {\r\n        for (let k in this.cancelControllers) {\r\n            this.cancelControllers[k].abort();\r\n        }\r\n\r\n        this.cancelControllers = {};\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Constructs a filter expression with placeholders populated from a parameters object.\r\n     *\r\n     * Placeholder parameters are defined with the `{:paramName}` notation.\r\n     *\r\n     * The following parameter values are supported:\r\n     *\r\n     * - `string` (_single quotes are autoescaped_)\r\n     * - `number`\r\n     * - `boolean`\r\n     * - `Date` object (_stringified into the PocketBase datetime format_)\r\n     * - `null`\r\n     * - everything else is converted to a string using `JSON.stringify()`\r\n     *\r\n     * Example:\r\n     *\r\n     * ```js\r\n     * pb.collection(\"example\").getFirstListItem(pb.filter(\r\n     *    'title ~ {:title} && created >= {:created}',\r\n     *    { title: \"example\", created: new Date()}\r\n     * ))\r\n     * ```\r\n     */\r\n    filter(raw: string, params?: { [key: string]: any }): string {\r\n        if (!params) {\r\n            return raw;\r\n        }\r\n\r\n        for (let key in params) {\r\n            let val = params[key];\r\n            switch (typeof val) {\r\n                case \"boolean\":\r\n                case \"number\":\r\n                    val = \"\" + val;\r\n                    break;\r\n                case \"string\":\r\n                    val = \"'\" + val.replace(/'/g, \"\\\\'\") + \"'\";\r\n                    break;\r\n                default:\r\n                    if (val === null) {\r\n                        val = \"null\";\r\n                    } else if (val instanceof Date) {\r\n                        val = \"'\" + val.toISOString().replace(\"T\", \" \") + \"'\";\r\n                    } else {\r\n                        val = \"'\" + JSON.stringify(val).replace(/'/g, \"\\\\'\") + \"'\";\r\n                    }\r\n            }\r\n            raw = raw.replaceAll(\"{:\" + key + \"}\", val);\r\n        }\r\n\r\n        return raw;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Please use `pb.files.getURL()`.\r\n     */\r\n    getFileUrl(\r\n        record: { [key: string]: any },\r\n        filename: string,\r\n        queryParams: FileOptions = {},\r\n    ): string {\r\n        console.warn(\"Please replace pb.getFileUrl() with pb.files.getURL()\");\r\n        return this.files.getURL(record, filename, queryParams);\r\n    }\r\n\r\n    /**\r\n     * @deprecated Please use `pb.buildURL()`.\r\n     */\r\n    buildUrl(path: string): string {\r\n        console.warn(\"Please replace pb.buildUrl() with pb.buildURL()\");\r\n        return this.buildURL(path);\r\n    }\r\n\r\n    /**\r\n     * Builds a full client url by safely concatenating the provided path.\r\n     */\r\n    buildURL(path: string): string {\r\n        let url = this.baseURL;\r\n\r\n        // construct an absolute base url if in a browser environment\r\n        if (\r\n            typeof window !== \"undefined\" &&\r\n            !!window.location &&\r\n            !url.startsWith(\"https://\") &&\r\n            !url.startsWith(\"http://\")\r\n        ) {\r\n            url = window.location.origin?.endsWith(\"/\")\r\n                ? window.location.origin.substring(0, window.location.origin.length - 1)\r\n                : window.location.origin || \"\";\r\n\r\n            if (!this.baseURL.startsWith(\"/\")) {\r\n                url += window.location.pathname || \"/\";\r\n                url += url.endsWith(\"/\") ? \"\" : \"/\";\r\n            }\r\n\r\n            url += this.baseURL;\r\n        }\r\n\r\n        // concatenate the path\r\n        if (path) {\r\n            url += url.endsWith(\"/\") ? \"\" : \"/\"; // append trailing slash if missing\r\n            url += path.startsWith(\"/\") ? path.substring(1) : path;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Sends an api http request.\r\n     *\r\n     * @throws {ClientResponseError}\r\n     */\r\n    async send<T = any>(path: string, options: SendOptions): Promise<T> {\r\n        options = this.initSendOptions(path, options);\r\n\r\n        // build url + path\r\n        let url = this.buildURL(path);\r\n\r\n        if (this.beforeSend) {\r\n            const result = Object.assign({}, await this.beforeSend(url, options));\r\n            if (\r\n                typeof result.url !== \"undefined\" ||\r\n                typeof result.options !== \"undefined\"\r\n            ) {\r\n                url = result.url || url;\r\n                options = result.options || options;\r\n            } else if (Object.keys(result).length) {\r\n                // legacy behavior\r\n                options = result as SendOptions;\r\n                console?.warn &&\r\n                    console.warn(\r\n                        \"Deprecated format of beforeSend return: please use `return { url, options }`, instead of `return options`.\",\r\n                    );\r\n            }\r\n        }\r\n\r\n        // serialize the query parameters\r\n        if (typeof options.query !== \"undefined\") {\r\n            const query = serializeQueryParams(options.query);\r\n            if (query) {\r\n                url += (url.includes(\"?\") ? \"&\" : \"?\") + query;\r\n            }\r\n            delete options.query;\r\n        }\r\n\r\n        // ensures that the json body is serialized\r\n        if (\r\n            this.getHeader(options.headers, \"Content-Type\") == \"application/json\" &&\r\n            options.body &&\r\n            typeof options.body !== \"string\"\r\n        ) {\r\n            options.body = JSON.stringify(options.body);\r\n        }\r\n\r\n        const fetchFunc = options.fetch || fetch;\r\n\r\n        // send the request\r\n        return fetchFunc(url, options)\r\n            .then(async (response) => {\r\n                let data: any = {};\r\n\r\n                try {\r\n                    data = await response.json();\r\n                } catch (_) {\r\n                    // all api responses are expected to return json\r\n                    // with the exception of the realtime event and 204\r\n                }\r\n\r\n                if (this.afterSend) {\r\n                    data = await this.afterSend(response, data, options);\r\n                }\r\n\r\n                if (response.status >= 400) {\r\n                    throw new ClientResponseError({\r\n                        url: response.url,\r\n                        status: response.status,\r\n                        data: data,\r\n                    });\r\n                }\r\n\r\n                return data as T;\r\n            })\r\n            .catch((err) => {\r\n                // wrap to normalize all errors\r\n                throw new ClientResponseError(err);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Shallow copy the provided object and takes care to initialize\r\n     * any options required to preserve the backward compatability.\r\n     *\r\n     * @param  {SendOptions} options\r\n     * @return {SendOptions}\r\n     */\r\n    private initSendOptions(path: string, options: SendOptions): SendOptions {\r\n        options = Object.assign({ method: \"GET\" } as SendOptions, options);\r\n\r\n        // auto convert the body to FormData, if needed\r\n        options.body = convertToFormDataIfNeeded(options.body);\r\n\r\n        // move unknown send options as query parameters\r\n        normalizeUnknownQueryParams(options);\r\n\r\n        // requestKey normalizations for backward-compatibility\r\n        // ---\r\n        options.query = Object.assign({}, options.params, options.query);\r\n        if (typeof options.requestKey === \"undefined\") {\r\n            if (options.$autoCancel === false || options.query.$autoCancel === false) {\r\n                options.requestKey = null;\r\n            } else if (options.$cancelKey || options.query.$cancelKey) {\r\n                options.requestKey = options.$cancelKey || options.query.$cancelKey;\r\n            }\r\n        }\r\n        // remove the deprecated special cancellation params from the other query params\r\n        delete options.$autoCancel;\r\n        delete options.query.$autoCancel;\r\n        delete options.$cancelKey;\r\n        delete options.query.$cancelKey;\r\n        // ---\r\n\r\n        // add the json header, if not explicitly set\r\n        // (for FormData body the Content-Type header should be skipped since the boundary is autogenerated)\r\n        if (\r\n            this.getHeader(options.headers, \"Content-Type\") === null &&\r\n            !isFormData(options.body)\r\n        ) {\r\n            options.headers = Object.assign({}, options.headers, {\r\n                \"Content-Type\": \"application/json\",\r\n            });\r\n        }\r\n\r\n        // add Accept-Language header, if not explicitly set\r\n        if (this.getHeader(options.headers, \"Accept-Language\") === null) {\r\n            options.headers = Object.assign({}, options.headers, {\r\n                \"Accept-Language\": this.lang,\r\n            });\r\n        }\r\n\r\n        // check if Authorization header can be added\r\n        if (\r\n            // has valid token\r\n            this.authStore.token &&\r\n            // auth header is not explicitly set\r\n            this.getHeader(options.headers, \"Authorization\") === null\r\n        ) {\r\n            options.headers = Object.assign({}, options.headers, {\r\n                Authorization: this.authStore.token,\r\n            });\r\n        }\r\n\r\n        // handle auto cancelation for duplicated pending request\r\n        if (this.enableAutoCancellation && options.requestKey !== null) {\r\n            const requestKey = options.requestKey || (options.method || \"GET\") + path;\r\n\r\n            delete options.requestKey;\r\n\r\n            // cancel previous pending requests\r\n            this.cancelRequest(requestKey);\r\n\r\n            const controller = new AbortController();\r\n            this.cancelControllers[requestKey] = controller;\r\n            options.signal = controller.signal;\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Extracts the header with the provided name in case-insensitive manner.\r\n     * Returns `null` if no header matching the name is found.\r\n     */\r\n    private getHeader(\r\n        headers: { [key: string]: string } | undefined,\r\n        name: string,\r\n    ): string | null {\r\n        headers = headers || {};\r\n        name = name.toLowerCase();\r\n\r\n        for (let key in headers) {\r\n            if (key.toLowerCase() == name) {\r\n                return headers[key];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import { BaseAuthStore, AuthRecord } from \"@/stores/BaseAuthStore\";\r\n\r\nexport type AsyncSaveFunc = (serializedPayload: string) => Promise<void>;\r\n\r\nexport type AsyncClearFunc = () => Promise<void>;\r\n\r\ntype queueFunc = () => Promise<void>;\r\n\r\n/**\r\n * AsyncAuthStore is a helper auth store implementation\r\n * that could be used with any external async persistent layer\r\n * (key-value db, local file, etc.).\r\n *\r\n * Here is an example with the React Native AsyncStorage package:\r\n *\r\n * ```\r\n * import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n * import PocketBase, { AsyncAuthStore } from \"pocketbase\";\r\n *\r\n * const store = new AsyncAuthStore({\r\n *     save:    async (serialized) => AsyncStorage.setItem(\"pb_auth\", serialized),\r\n *     initial: AsyncStorage.getItem(\"pb_auth\"),\r\n * });\r\n *\r\n * const pb = new PocketBase(\"https://example.com\", store)\r\n * ```\r\n */\r\nexport class AsyncAuthStore extends BaseAuthStore {\r\n    private saveFunc: AsyncSaveFunc;\r\n    private clearFunc?: AsyncClearFunc;\r\n    private queue: Array<queueFunc> = [];\r\n\r\n    constructor(config: {\r\n        // The async function that is called every time\r\n        // when the auth store state needs to be persisted.\r\n        save: AsyncSaveFunc;\r\n\r\n        /// An *optional* async function that is called every time\r\n        /// when the auth store needs to be cleared.\r\n        ///\r\n        /// If not explicitly set, `saveFunc` with empty data will be used.\r\n        clear?: AsyncClearFunc;\r\n\r\n        // An *optional* initial data to load into the store.\r\n        initial?: string | Promise<any>;\r\n    }) {\r\n        super();\r\n\r\n        this.saveFunc = config.save;\r\n        this.clearFunc = config.clear;\r\n\r\n        this._enqueue(() => this._loadInitial(config.initial));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    save(token: string, record?: AuthRecord): void {\r\n        super.save(token, record);\r\n\r\n        let value = \"\";\r\n        try {\r\n            value = JSON.stringify({ token, record });\r\n        } catch (err) {\r\n            console.warn(\"AsyncAuthStore: failed to stringify the new state\");\r\n        }\r\n\r\n        this._enqueue(() => this.saveFunc(value));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     */\r\n    clear(): void {\r\n        super.clear();\r\n\r\n        if (this.clearFunc) {\r\n            this._enqueue(() => this.clearFunc!());\r\n        } else {\r\n            this._enqueue(() => this.saveFunc(\"\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the auth store state.\r\n     */\r\n    private async _loadInitial(payload?: string | Promise<any>) {\r\n        try {\r\n            payload = await payload;\r\n\r\n            if (payload) {\r\n                let parsed;\r\n                if (typeof payload === \"string\") {\r\n                    parsed = JSON.parse(payload) || {};\r\n                } else if (typeof payload === \"object\") {\r\n                    parsed = payload;\r\n                }\r\n\r\n                this.save(parsed.token || \"\", parsed.record || parsed.model || null);\r\n            }\r\n        } catch (_) {}\r\n    }\r\n\r\n    /**\r\n     * Appends an async function to the queue.\r\n     */\r\n    private _enqueue(asyncCallback: () => Promise<void>) {\r\n        this.queue.push(asyncCallback);\r\n\r\n        if (this.queue.length == 1) {\r\n            this._dequeue();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the queue processing.\r\n     */\r\n    private _dequeue() {\r\n        if (!this.queue.length) {\r\n            return;\r\n        }\r\n\r\n        this.queue[0]().finally(() => {\r\n            this.queue.shift();\r\n\r\n            if (!this.queue.length) {\r\n                return;\r\n            }\r\n\r\n            this._dequeue();\r\n        });\r\n    }\r\n}\r\n"],"names":["ClientResponseError","Error","constructor","errData","super","this","url","status","response","isAbort","originalError","Object","setPrototypeOf","prototype","data","DOMException","name","message","cause","includes","toJSON","fieldContentRegExp","cookieParse","str","options","result","decode","assign","defaultDecode","index","length","eqIdx","indexOf","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","_","cookieSerialize","opt","encode","defaultEncode","test","TypeError","value","maxAge","isNaN","isFinite","Math","floor","domain","path","expires","isDate","toString","call","Date","valueOf","toUTCString","httpOnly","secure","priority","toLowerCase","sameSite","decodeURIComponent","encodeURIComponent","isReactNative","navigator","product","global","HermesInternal","atobPolyfill","getTokenPayload","token","encodedPayload","split","map","c","join","JSON","parse","e","isTokenExpired","expirationThreshold","payload","keys","exp","now","atob","input","String","replace","bs","buffer","bc","idx","output","charAt","fromCharCode","defaultCookieKey","BaseAuthStore","baseToken","baseModel","_onChangeCallbacks","record","model","isValid","isSuperuser","type","collectionName","collectionId","isAdmin","console","warn","isAuthRecord","save","triggerChange","clear","loadFromCookie","cookie","rawData","Array","isArray","exportToCookie","defaultOptions","stringify","resultLength","Blob","size","id","email","extraProps","prop","onChange","callback","fireImmediately","push","i","splice","LocalAuthStore","storageKey","storageFallback","_bindStorageEvent","_storageGet","_storageSet","_storageRemove","window","localStorage","rawValue","getItem","normalizedVal","setItem","removeItem","addEventListener","BaseService","client","SettingsService","getAll","method","send","update","bodyParams","body","testS3","filesystem","then","testEmail","collectionIdOrName","toEmail","emailTemplate","template","collection","generateAppleClientSecret","clientId","teamId","keyId","privateKey","duration","knownSendOptionsKeys","normalizeUnknownQueryParams","query","serializeQueryParams","params","encodedKey","arrValue","v","prepareQueryParamValue","toISOString","RealtimeService","eventSource","subscriptions","lastSentSubscriptions","maxConnectTimeout","reconnectAttempts","maxReconnectAttempts","Infinity","predefinedReconnectIntervals","pendingConnects","isConnected","subscribe","topic","serialized","headers","listener","msgEvent","submitSubscriptions","connect","async","unsubscribeByTopicAndListener","unsubscribe","needToSubmit","subs","getSubscriptionsByTopic","hasSubscriptionListeners","removeEventListener","disconnect","unsubscribeByPrefix","keyPrefix","hasAtleastOneTopic","startsWith","exist","keyToCheck","addAllSubscriptionListeners","getNonEmptySubscriptionKeys","requestKey","getSubscriptionsCancelKey","catch","err","removeAllSubscriptionListeners","Promise","resolve","reject","initConnect","clearTimeout","connectTimeoutId","setTimeout","connectErrorHandler","EventSource","buildURL","onerror","lastEventId","retries","hasUnsentSubscriptions","p","reconnectTimeoutId","connectSubs","latestTopics","t","timeout","fromReconnect","onDisconnect","cancelRequest","close","CrudService","getFullList","batchOrqueryParams","_getFullList","batch","getList","page","perPage","baseCrudPath","responseData","items","item","getFirstListItem","filter","skipTotal","code","getOne","create","batchSize","request","list","concat","normalizeLegacyOptionsArgs","legacyWarn","baseOptions","bodyOrOptions","hasQuery","resetAutoRefresh","_resetAutoRefresh","RecordService","baseCollectionPath","isSuperusers","realtime","batchOrOptions","authStore","authExpand","expand","authRecord","delete","success","authResponse","listAuthMethods","fields","authWithPassword","usernameOrEmail","password","autoRefreshThreshold","identity","autoRefresh","authData","registerAutoRefresh","threshold","refreshFunc","reauthenticateFunc","oldBeforeSend","beforeSend","oldModel","unsubStoreChange","newToken","sendOptions","oldToken","authRefresh","authWithOAuth2Code","provider","codeVerifier","redirectURL","createData","authWithOAuth2","args","config","eagerDefaultPopup","urlCallback","openBrowserPopup","cleanup","requestKeyOptions","authMethods","oauth2","providers","find","cancelController","signal","onabort","oldState","state","error","scopes","replacements","forEach","_replaceQueryParams","authURL","location","href","requestPasswordReset","confirmPasswordReset","passwordResetToken","passwordConfirm","requestVerification","confirmVerification","verificationToken","verified","requestEmailChange","newEmail","confirmEmailChange","emailChangeToken","listExternalAuths","recordId","unlinkExternalAuth","ea","requestOTP","authWithOTP","otpId","impersonate","Authorization","Client","baseURL","lang","urlPath","substring","parsedParams","rawParams","param","pair","hasOwnProperty","open","width","height","windowWidth","innerWidth","windowHeight","innerHeight","left","top","CollectionService","import","collections","deleteMissing","getScaffolds","truncate","LogService","getStats","HealthService","check","FileService","getUrl","filename","queryParams","getURL","parts","download","URLSearchParams","getToken","BackupService","basename","upload","restore","getDownloadUrl","getDownloadURL","CronService","run","jobId","isFile","File","uri","isFormData","FormData","hasFileField","values","inferNumberCharsRegex","inferFormDataValue","num","BatchService","requests","SubBatchService","formData","jsonData","req","json","files","file","append","upsert","prepareRequest","convertFormDataToObject","k","parsed","foundFiles","foundRegular","fileKey","endsWith","baseUrl","cancelControllers","recordServices","enableAutoCancellation","Deno","logs","settings","health","backups","crons","admins","createBatch","idOrName","autoCancellation","enable","abort","cancelAllRequests","raw","replaceAll","getFileUrl","buildUrl","origin","pathname","initSendOptions","getHeader","fetch","afterSend","convertToFormDataIfNeeded","form","$autoCancel","$cancelKey","controller","AbortController","AsyncAuthStore","queue","saveFunc","clearFunc","_enqueue","_loadInitial","initial","asyncCallback","_dequeue","finally","shift"],"mappings":"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"}